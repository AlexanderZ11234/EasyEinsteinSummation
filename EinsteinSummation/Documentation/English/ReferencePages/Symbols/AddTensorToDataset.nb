(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    475383,       9450]
NotebookOptionsPosition[    458023,       9088]
NotebookOutlinePosition[    466992,       9289]
CellTagsIndexPosition[    466949,       9286]
WindowTitle->AddTensorToDataset
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[GridBox[{
   {
    TemplateBox[{"Einstein Summation Package Symbol", 
      RGBColor[
      0.023521148023270023`, 0.42745085139216266`, 0.7294108638979683]},
     "PacletName"], Cell[TextData[{
     Cell[BoxData[
      TagBox[
       ActionMenuBox[
        FrameBox[Cell[TextData[{
          "See Also",
          " ",
          Cell[BoxData[
           TemplateBox[{},
            "HeaderMenuArrow"]],ExpressionUUID->
           "339812fe-71b2-437e-8633-783dfd5404f7"]
         }],ExpressionUUID->"fab6055d-1067-4e0d-88e0-fcc0533a4d6d"],
         StripOnInput->False], {"$TensorDefinitions":>
        Documentation`HelpLookup[
        "paclet:EinsteinSummation/ReferencePages/Symbols/$TensorDefinitions"],
         "EvaluateEinsteinSummation":>Documentation`HelpLookup[
        "paclet:EinsteinSummation/ReferencePages/Symbols/\
EvaluateEinsteinSummation"], "ParseTensor":>Documentation`HelpLookup[
        "paclet:EinsteinSummation/ReferencePages/Symbols/ParseTensor"]},
        Appearance->None,
        MenuAppearance->Automatic,
        MenuStyle->"SeeAlso"],
       MouseAppearanceTag["LinkHand"]]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "4640f4fb-61e5-4101-8348-3ec011cc1a1a"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      TagBox[
       ActionMenuBox[
        FrameBox[Cell[TextData[{
          "Tutorials",
          " ",
          Cell[BoxData[
           TemplateBox[{},
            "HeaderMenuArrow"]],ExpressionUUID->
           "d7c487a4-8721-4095-bb43-08a1a70222c1"]
         }],ExpressionUUID->"21d1d030-6829-4826-b8ed-3faf311aa88a"],
         StripOnInput->False], {
        RowBox[{"Einstein", " ", "Summation"}]:>Documentation`HelpLookup[
        "paclet:EinsteinSummation/ReferencePages/Tutorials/EinsteinSummation"]\
},
        Appearance->None,
        MenuAppearance->Automatic,
        MenuStyle->"Tutorials"],
       MouseAppearanceTag["LinkHand"]]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "6ca889ca-6f6d-4615-b173-84c460a503ea"],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      TagBox[
       ActionMenuBox[
        FrameBox[Cell[TextData[{
          "Related Guides",
          " ",
          Cell[BoxData[
           TemplateBox[{},
            "HeaderMenuArrow"]],ExpressionUUID->
           "a9995542-bce3-4a9c-b82c-7e2586a1c4ab"]
         }],ExpressionUUID->"6fa97554-cd33-4ac8-918c-7bb12e7e2146"],
         StripOnInput->False], {
        RowBox[{
        "Tensor", " ", "Expressions", " ", "with", " ", "Einstein", " ", 
         "Summation"}]:>Documentation`HelpLookup[
        "paclet:EinsteinSummation/ReferencePages/Guides/\
TensorExpressionswithEinsteinSummation"]},
        Appearance->None,
        MenuAppearance->Automatic,
        MenuStyle->"MoreAbout"],
       MouseAppearanceTag["LinkHand"]]],
      LineSpacing->{1.4, 0},ExpressionUUID->
      "e4a1ef8f-2347-47dc-88c2-7a0bbb34d986"]
    }], "AnchorBar",ExpressionUUID->"9ffef76b-e7bb-4aa4-b044-c918309e9b74"]}
  }]], "AnchorBarGrid",
 CellID->170884626,ExpressionUUID->"87574fe2-9963-418b-aaf8-56d866aee20b"],

Cell["EinsteinSummation`", "ContextNameCell",
 CellID->509163821,ExpressionUUID->"f090fe43-321c-4128-beae-954c6daaca5e"],

Cell[CellGroupData[{

Cell["AddTensorToDataset", "ObjectName",
 CellID->6842118,ExpressionUUID->"1e94f433-0e20-4440-9bf1-0ef488e131b5"],

Cell[BoxData[GridBox[{
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{
       TemplateBox[{
        "AddTensorToDataset", 
         "paclet:EinsteinSummation/ReferencePages/Symbols/AddTensorToDataset"},
        "RefLink",
        BaseStyle->{}], "[", 
       StyleBox["tensor", "TI"], "]"}]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"af0e180f-3013-43d0-9ca1-79717fd48ae9"],
     "\[LineSeparator]",
     " adds ",
     Cell[BoxData[
      StyleBox["tensor", "TI"]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"4f224241-b7bb-4fbe-b3d7-d33c6cc09a25"],
     " to ",
     Cell[BoxData[
      TemplateBox[{
       "$TensorDefinitions", 
        "paclet:EinsteinSummation/ReferencePages/Symbols/$TensorDefinitions"},
       "RefLink",
       BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
      "8f5f913b-3c5a-44ff-ba76-9c745c1f66d3"],
     " for further computation."
    }],ExpressionUUID->"f96bfc3e-6260-4661-abc2-2becafe42f79"]},
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{
       TemplateBox[{
        "AddTensorToDataset", 
         "paclet:EinsteinSummation/ReferencePages/Symbols/AddTensorToDataset"},
        "RefLink",
        BaseStyle->{}], "[", 
       StyleBox["tensor", "TI"], ",", 
       StyleBox["value", "TI"], "]"}]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"a049689a-3a47-43f7-8367-f862a0ed91fd"],
     "\[LineSeparator]",
     " sets ",
     Cell[BoxData[
      StyleBox["tensor", "TI"]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"e937acfc-29ce-4d8e-9e06-b0b2914f00c8"],
     "'s value as ",
     Cell[BoxData[
      StyleBox["value", "TI"]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"70332238-6c46-42b8-b5f9-999cee58bc8f"],
     "."
    }],ExpressionUUID->"5da29cde-ac96-447a-9596-506d602323e0"]},
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{
       TemplateBox[{
        "AddTensorToDataset", 
         "paclet:EinsteinSummation/ReferencePages/Symbols/AddTensorToDataset"},
        "RefLink",
        BaseStyle->{}], "[", 
       StyleBox["str", "TI"], ",", 
       StyleBox["value", "TI"], "]"}]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"bf6b4e41-d3b7-45b0-a545-ca7f713ee1a0"],
     "\[LineSeparator]",
     " parse ",
     Cell[BoxData[
      StyleBox["str", "TI"]], "InlineFormula", "InlineFormula",ExpressionUUID->
      "e27ad842-e847-4271-bd0e-f938e275e816"],
     " as a tensor object using ",
     Cell[BoxData[
      TemplateBox[{
       "ParseTensor", 
        "paclet:EinsteinSummation/ReferencePages/Symbols/ParseTensor"},
       "RefLink",
       BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
      "876be6e8-c05a-471e-ad27-01e989694a9a"],
     " and set its value as ",
     Cell[BoxData[
      StyleBox["value", "TI"]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"1a0e8607-6d2e-4b06-90b3-a04c2b7dc636"],
     "."
    }],ExpressionUUID->"241daad6-67f9-4378-9daf-b76141d8f2d3"]},
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{
       TemplateBox[{
        "AddTensorToDataset", 
         "paclet:EinsteinSummation/ReferencePages/Symbols/AddTensorToDataset"},
        "RefLink",
        BaseStyle->{}], "[", 
       StyleBox["str", "TI"], ",", 
       StyleBox["tensor", "TI"], "]"}]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"500033c8-36c0-462a-9bfe-2b57b921b10e"],
     "\[LineSeparator]",
     " sets up the value of tensor named as ",
     Cell[BoxData[
      StyleBox["str", "TI"]], "InlineFormula", "InlineFormula",ExpressionUUID->
      "907928d4-e9b8-4e22-8dbc-fd581c003442"],
     " as value of ",
     Cell[BoxData[
      StyleBox["tensor", "TI"]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"8b8831e9-9b6e-4e85-8f88-5cda83446620"],
     "."
    }],ExpressionUUID->"3776c736-e395-41d4-9b66-ec9deaef1821"]},
   {"", Cell[TextData[{
     Cell[BoxData[
      RowBox[{
       TemplateBox[{
        "AddTensorToDataset", 
         "paclet:EinsteinSummation/ReferencePages/Symbols/AddTensorToDataset"},
        "RefLink",
        BaseStyle->{}], "[", 
       StyleBox["asso", "TI"], ",", "\[CenterEllipsis]", "]"}]], 
      "InlineFormula", "InlineFormula",ExpressionUUID->
      "00d20b62-3417-4f2d-83de-669516a05c1d"],
     "\[LineSeparator]",
     " sets up the value of tensor corresponding to ",
     Cell[BoxData[
      TemplateBox[{"Association", "paclet:ref/Association"},
       "RefLink",
       BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
      "e5a71f6a-3972-4eb9-a16a-94215cf4699f"],
     " ",
     Cell[BoxData[
      StyleBox["asso", "TI"]], "InlineFormula", "InlineFormula",
      ExpressionUUID->"2fb22c38-94a2-4b04-bc5c-c6c3bcafd1fb"],
     "."
    }],ExpressionUUID->"2c51f0b1-5f3d-43a8-9aad-f3b19d5282a3"]}
  }]], "Usage",
 GridBoxOptions->{
 GridBoxBackground->{
  "Columns" -> {{None}}, "ColumnsIndexed" -> {}, 
   "Rows" -> {None, None, {None}}, "RowsIndexed" -> {}}},
 CellID->521453495,ExpressionUUID->"9854b96a-8744-459c-a3b2-ee91610e6eb9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData[{
      Cell[
       BoxData[
        TemplateBox[{}, "DetailsHeader"]], "NotesFrameText", 
       "NotesFrameText"]}]], 6, {
   TaggingRules, "Openers", "NotesSection", "0"}, 
   RGBColor[
    Rational[217, 255], 
    Rational[101, 255], 0]},
  "SectionOpener"]], "NotesSection", "NotesSection",
 WholeCellGroupOpener->True,
 CellID->112490581,ExpressionUUID->"82085052-bcbf-447b-9225-b9d64f813b92"],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{
   "AddTensorToDataset", 
    "paclet:EinsteinSummation/ReferencePages/Symbols/AddTensorToDataset"},
   "RefLink",
   BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
  "effc6e5e-1796-4553-bd5f-d3eb3b0fcc28"],
 " adds a tensor's definition to ",
 Cell[BoxData[
  TemplateBox[{
   "$TensorDefinitions", 
    "paclet:EinsteinSummation/ReferencePages/Symbols/$TensorDefinitions"},
   "RefLink",
   BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
  "19bfe15e-738d-49ca-b628-3a78f6663229"],
 "."
}], "Notes",
 CellID->461344949,ExpressionUUID->"7b28aa51-06a0-44f3-8648-746091d94d31"],

Cell[TextData[{
 Cell[BoxData[
  TemplateBox[{
   "AddTensorToDataset", 
    "paclet:EinsteinSummation/ReferencePages/Symbols/AddTensorToDataset"},
   "RefLink",
   BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
  "723abe3d-9c00-43ac-a9e5-043426eac977"],
 " deletes duplicates by tensor symbols' names and their dimensions. This \
means that while two tensors with the same name yet with different dimensions \
can co-exist (e.g. Riemann tensor and Ricci tensor), tensors only \
distinguished by their indexes' names and their indexes' positions cannot."
}], "Notes",
 CellID->499068436,ExpressionUUID->"cc76482c-fb70-4d0a-a80b-477b290e4cc4"]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {TaggingRules, "Openers", "NotesSection", "0"}]]]],

Cell[BoxData[
 TagBox[
  TogglerBox[Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "Openers", "NotesSection", "0"}]], {
   True->
   GraphicsBox[{},
    ImageSize->{0, 80}], Open->
   GraphicsBox[{},
    ImageSize->{0, 80}]}, 
   GraphicsBox[{InsetBox[
      TagBox[GridBox[{
         {
          TemplateBox[{10},
           "Spacer1"], 
          GraphicsBox[
           TagBox[RasterBox[CompressedData["
1:eJztWldvHFl2HtgvfvRf8L/wq18M+HUN/4Bd7HjhlzEwa8Dws7EL707SSKNA
Ntk55ybZ7MAmO+ecQ3XOOWc2SX/VPZIoUdRIsmY9M6hPUKHq1rnnnnPq3nO/
c5t/95t//9W//tUnn3zy+7/B5Ve//s9/+PzzX//XP/8tHv7ls9//2+8++/S3
//TZf3z6u08///vf/DUa/xH/xfhP3l9vcfMcL+/ux7vI3JW8PcrNm9rvCrxi
2D3d75N/X7y954fr/Zlgvd6kKmPcxIuD5foqWRrYou10bbJ7e/U8sFdX5M18
cWkKNmr9xebquj9aWiOt6WKD9sF4OZytb6tFy2h+ufsu15t1IpWez6bxZOr7
lu212Wis1pev2bPZkApzBDEaT3eDEpn0cDxFJ5PxvFSpQmAyHpbL5WqtOhqP
L7fym83VzfVVvdG4vr7a2elJdYnKyJbovObIC4SIXrQ43PU1hRrV7hxOjaer
SntW687H88vNdvSdDVevLpafOxq1SiqTw0260PsDP+aIt+laQmkvK+xlg7/h
Tffk1hLuj5wVtbtqjrRMoabKXjZH2jpvLZjt6701PFoiLZ2vrrKVaaeEK9mV
W0pqd80caSps5e+UyVRjnk9FWSzuxbnhgH54cnJ8SD881eoXi4VEwIsnCZ1G
JVcoJRKJXCE/UQOnVqvVcHYmFAiCofD5mS6aTOeJNIN5yOPzJRLRk6dP9Wdn
MrlUq9fzuGy5SmU4M0D+5ORIqlDUa1UWk268MJrM5lZ/fuSqJooDQ7B5EayL
zaQvp+7aWaBhiTR1vprEVDx11YzBBvc8LzUX99QZvJLbSnp/nWfIo68h0DgP
NI6dlRN3VWkrEw1Mv5tfzPefjEedbh83gXTnzF8XXBQ1nprciu/bSpSGqfJQ
YS2bIi1XsmPwo72EKSGzlur9Rao0TJaGWk9N467qfXVbtMXUZfX+hjnUoGuz
F6GG1FRUOarGUKPcXbqsF0+f7Ws0WpVSoVKqzs/PVEeqer1Be/YkEEnkiKRM
Kj06PrHbHfh3fKRUKJR6nVZ1rIZhYb/TZLGlEnGFQoH5YDg3upwOrU7v9nhP
NRqTyWQ0Xmi1Op0G6nU2hwML32oxajVaw/nFan2FTxbJDzLV8Zm3pvHWnckO
OS2tJbh57Kh4Mz1buGncTunzYNOdaGMae9NdvLVspzoeMc+1XrJR7aqZgpVW
s46v/0vKAC+A/LbekDlzdXm1a9l6St5cbtt315vn83+9FZsvt1l3mxsR8GtS
bPt6G6X15vrqapeWL6F/c0li832i3mwHJRMqrjvNeEtqXq+3o1zjcZeul8vl
i7e3sVqtt9fVzfOtBKouL9fXWyMH05c70YscfrU1bPt0s1xtdu3f23xb8+Ur
oYDYTvMHBveniJcb2d098d250I+yFN7KA99F/odH+PCuFH4GoL4qBQo/iBfZ
77WUfv3ieuvx9tub5/RgVw+9FL65eaVCen6/2+Wvn+OOGS8bX8i8lL6+fk3X
bVWv4eb5ZvHGlptbW8l9fd8ocPfVfQrvdnxjy209r9l8n207mnSfqo+Cj73N
7nq9U7erzeY+yY/l6UeM2I6+3lL8Zs079nuPMVcfy5h3x/Vzsj2drVDygF+f
Bxvt4RLl8ImzGswPJ/P1cLrujpaj2Xqx3gzGKzD8emeGoj7XnKK9WB8fOSq1
3mI8WydLg3JnPp1fjqbr+WozW6xj+X6lu1iv5meGs+F4UsgTkVhiNBoG/L5W
pzsajXq9/mq9WS8Xer2u2x+BurdbzVqlYrJY2h0Sk8mk12mh8J/Npv1+f4jO
g+650TQcjsD/x8OBPxCczqZo7nTaUDidzVDGTqezXrc7ny96vd5yuVrM5/V6
vdVqJ2IRXyC8Xq263Z7P6213e4UcUa03h4P+YDiaTafz+Rx6Gg2E4hI6MeJq
vb5cr8bjCWTGk0m3XbfYHfVqxXhx4fWHINbvdwvFQqvZQvXRblRPTk9RdQIY
DmXOcAglvf5ggJtKpdztdoejMal5QIKsN642ulM16lOn24uhC8XiaDzBV2k2
G81W+3JDmjGFP7N5r9eBg4jAcjHzuF1n5xfjCVyfVsvFWCJ58/7zuVLKh2Nk
x0Cy9d/cqMJeZuqzTF3uyFW1x9oocmnqDMeQF5mLImNRaimpXdUDdcYa6zhi
bU+qq7CVeIa8K9FR2stof3yURuH/VJUSmUpSc/FQk32oSKbrM6tRf0g/fPjw
IZvDZTKZ+/v7tIM9Pp93cHhIp9OTacJiutjb35MqlMcqpUQqhYxQLOFwOMFw
VH+q/vLLr0QiwcHBAZ3BkMiVzUYdAuTJj1Sez2V5XCaDwTikM/hCgUgkFIlE
R0fHPA5bLFXhG7HZbL1ej7EY6MLlsjlsvkBIox2olEouD+D6gxHkGblMLFUo
RHzek6fPoJnL4UAljTTvMBJPEcnYn/7nTxKZjMPlsFhM/bnR73EwWSyRWHxw
QNvbp8FmgVBSq9aEAh6DxZTJ5RiOz+PjLe3ggMPliiVigUBwdHwsFkvlMimD
xZLJZQwGs1CqIPhOu83r9cE8IV5LJRrdWa1afvbsmYAvOIQVDKZCJnv48JFY
KoGDApGk2aixWYdCoUihUsHWr7768txkuXlrbnkjUH3v6mWiOiKq4/NAA58S
X9af6ZVa01pn5k50EuVRtj4JEl3MB1+660p2x/PLUnNa684gHMj0jKFmujzU
eWuR/MCT7Oh99XCub420PKleojio9laIntlscdgdsXjc43F5PL4MkXba7aFw
JOD3ELkCkU5ZLFaH3X5hOOfyBd4t/H5/JBIxm4xWmz0ajVittmQyYbPb+v0B
1l00EhaKJEi5oYDPYXeGI9FsNheNhW02q8fjcTqd5VpjuZjiUatRmyy2XDaX
zWa9Xg/0+P0+t8sdiUZdTnuaII86iQwB5Tqt1mK1EQQp6vW4vEgTYX8ilclm
UsfHJ+mtDIaOJVKDftfhcBZLJZfTsRULpbN5pAir2YShQ+EwFGazBPnW68dt
Op1y2K1OlzsUCqJjMgVlaYfD6vX51peXlRJQLhQKcDkai7jcbqSmRCKRz+Xc
LqffH3TYrPqz82w2n0zGzWYz8l7A701liHg8qtFo3G4P9H3A2v9AvN8o72dS
t9d7F7HZdIJ8+i4DI4W+fU/9CwXtR8ZH9GL3o8Y9o/yQGW+y511sezf73yDz
4pzw5hYZvvvq7lj3vb1506Hi3ZjcNviuDfeZ9GpY7hv/LwoQIfg76LbNVvt4
PHLYbZVaA2RjOh6BcZHMB3vEcgHGcrVZh8OR5XI5n8+GwwHYyGKxnM9muI5H
w26vj2y82mrrtFvI2B63G6kRoUunEiaTqVxtgOdMZ/PLyzXZdz5fr9fQg1yH
sEynE1wHgz6oGnTiFUmThiOQU9iCR0RytVoOel3k7SU2ra1hWSKNgUwmc6dH
ZoNCLmOx2YMBH7bdeDINugiqBPYIRgfS1GrW41uOFIsErXYH2Fi73YY9YGiz
GekRxCbjcbVWRRzgyPctE/L3neFgADNgG+Iy3raALaIXyBfukflHozHsKRRy
4JDYu3OFYr/bLpTKk8kYfiFfNZstSBKphFavj8TjIHNQCC7X6XbhClSR3g0G
i8Uc7G4xm0TjCYQa7YNtqOEyQoQrLLm83JDyyyUIK4JpNF3MFsv3/e67mel3
O77+6msOhwsqIpKI5XIlk0mnszi5bIbNZgh4vMePn4hEZHsuS/C4LA6HTRIb
oQB8RiqVnpycgI8IhWIuhwsmY9Cqv/nmgVQm53BYYrEYJC+ZIdTHci4PnEv4
9Onjo1NdOhmXK1XqI9WzvX2+QMBhc3g8zpNn+5VKFbTrVKtjwxSwNDYbfOnw
YF8gllbKJYVctre3R6Pt8YSifrfz8MHXdAZTJpOx2AyMLyHNy3K5LDaIlkiE
r7/linQ+T8BkMkAaQQoPD/Y0ZwZQ/YNDGpfPl8nkYJ7gijQajcVmkx6JxQqF
QnV0pFKqxCIhV8DHVXVyWikVdHpD0Od98M0DoUio0Z/FotELo8mg18PTRCJO
P6QhRHvPnunPDDCJy2aYbPZ6taw+Pnr0+Em3P5AIuUdqHaaB2aD985+/PDo+
AatkYlQul35IPzMYGAc0FoekiDw+TyxX5HMEi0lns1mQEYhACcVQq1arwWkV
qtNep/3dtw94AiH5TyRictjj6eJ9v/4uETWqZaVSabM78oWC2w3C47eYjU63
Dws8GAzYrNZTjSYUCmF9YSWCaJmMJsikUulgyG+8OLfb7RaLpVCu+L3OXKGc
zSSVShUEsCTBSeLxeL3ZzBEpt8dHEBmdVpNMZ4eDjk6n0WoQRUMCNChF8iKz
hcw8yWTS5/XAHovVnk6lk4nExbnBHwwv5xPQdBA2fyAQCoWxQLTbWglk0utx
g0Om0ulWswlhq80WjkTAtTwul81mz+bzoYDf7nSlM5lAwBeLJ1E46HU6u8MR
CIYwRCwaOTec+/wBGBIKB87PDS63x+V0oi/ZEgoYTSYUceCTbpdDoVRFojFw
uWql7PZ4Aj6vze7EgrWZzSg/zSaTLxD0+zxG40WGyDXqVZPxwgLaifm2v69Q
HTfbrUqp6APh8/vhsMfri8XimXTa5bKjErE73alUEmoTqVR/0Pd53WaTGUYi
1H6/F6F2OBwgfvVWd9hrS8Rit8cPN8FFTWbL3T+T+MniA1gKSv1Wp3tLw0c1
6MfBek3uTzfbcgx7XypN/CRJ5jX5s+utMytsJfdTPxKb+4/jXtF7z3nmDfmz
7PLFI6L0Wsf7fku9y8deEqqr73+o3P0c/PztG6gdafxbzb5LCHfBuW3/7g+K
7lp+F3cDtZsSiMDr4/5QSO8eOP9fDnt3bqYTUalM5vb5W61Wuw2+1kqlUNX2
kBvBwcCLqtVqp9MBRxr0eii1auWS1eZAx1a97PUH+/0eOoIpbU/npu1WczQe
FwuFar0BGTyiY7VaScSiHn9wtqVzRDp+pD4plsqtZgNVOXJytVLpDwa1aqVQ
LC0Wi3w+WypXysW8Vm+YTmco3GCJTq8tFot6g6HV6kAGdbfdZlGfarCrwrJc
LouqudFolstkCQ0q1W3Vwa/6/S7Mm0yng0Gv2Wy2Ox3sYovlqlgsQHO304Fb
KPJb7c6UJGaNZovkZr0uebZWLBVhsNViTBHZgN+DzbpYqU8n40IB5XiuWq3V
alWYVKs3QHrVmlMoxx4xnkzAMHEDVZFwCKwTJg0GIyjv9/udTjuVjJvMZiKX
RahBEetk6Lroe7P9U7c+kn6vT36GdrtRr8G5bqcNDuYPht44lz4YuwMit830
xRdfKRRKHl/odDiwF5stVkRSyGeDONEOD0HMhEIBl8uVyxVsFkMiVbhcztly
Xc6n6XRsaPsMJgvMhM/n8fl8lUp1eEBTKo+4PB5YnEohB3sDxeJwOXKFQiZX
EgSoI5vJZkObQIAe3JMTNYTFYhFtnwY2eHJyLBSKQHKEAoFILAbN++7xYxaL
zRMK0ZcLcgkGIBDhE/B5LJlcwWIxHzx4AGJEOzhME3m3yw76BGoKaw4PaQ8e
PoJhjx8/PaDRwP2gZziZNmvl7V+anTz85gGDxUEjDPn222+ZIIhMZrvTFbAZ
Dx5+tz2UY9CZjHgypVKIxRIZj8fFWFy+AO0ubzCTitPhu4DPYnNAOL8gTyZF
jx49ApkkjzLp9FK1DsYiEYvAV8USKZ/LAUuTy8GBOWBHEokULI7Ng2d8kURW
yGfVp1q/x/3HP/wR7mAsnoCkrPg0+88eq7X6XeHzsb7+biJhASKqiQRWZxSk
C2wNZRFqOVCugD8I5lMuVzKZlM/rDYMDBYO1eh1T2uZ0jcfjSCgYDIay2Vy5
XI7HI36fDysrHIliIYP8IFEkohE8V6rVeDyG5XN8qkUl5bDZQGYIzGe/D7QQ
JA1LPhYJPXz4yGSxWi2WSDROECmn04nlFY9FSVKXTDpdbtRudpsNa0cqUyDT
h4OBbL6ARAEeRWSz4GPYkErFPFgZljbqzUAA9pLULhqJBvwBLFiP27lEeTUd
F4ulcDiIOhS0s1KpYC7BQSQB39Zsp8Pm8fpr5Ogxq9WKajdHpBNJhKLk9Xgz
BBGJRFFkddrNWCJZqZTRF74HA0EwtGg0ihvYA387/dFqMcXUiCcSECCyhNvl
TKYziTj6paKIYziC8GazGbBKZIZIJBwOBZEZ8oUSQR4a5vO5rXcYMRyqN5o3
P4ETql2t/b69FnME7G1lKXLgrnz+gdFXy9l8/r6j/3+BPEz4+VhLgQIFChQo
UKBAgQIFChQoUKBAgQIFChQoUKBAgQIFChQoUKBAgQIFChQoUKBAgQIFChQo
UKBAgQIFChQoUKBAgQIFChQoUKBAgQIFChQoUKBAgQIFChQoUKBAgQIFChQo
UKBAgcIvFf8LIGhofQ==
             "], {{0, 30.}, {72.85714285714285, 0}}, {0, 255},
             ColorFunction->RGBColor,
             ImageResolution->168.],
            BoxForm`ImageTag[
            "Byte", ColorSpace -> "RGB", Interleaving -> True],
            Selectable->False],
           DefaultBaseStyle->"ImageGraphics",
           ImageSizeRaw->{72.85714285714285, 30.},
           PlotRange->{{0, 72.85714285714285}, {0, 30.}}], 
          TemplateBox[{10},
           "Spacer1"]}
        },
        AutoDelete->False,
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], Scaled[{0, 0}], Scaled[{0, 0}]], InsetBox[
      PaneSelectorBox[{True->
       OverlayBox[{
        GraphicsBox[
         {RGBColor[0, 
           NCache[
            Rational[2, 3], 0.6666666666666666], 1], Opacity[0.06], 
          RectangleBox[{-360, -40}, {360, 40}]},
         ImagePadding->None,
         ImageSize->{720, 80},
         PlotRangePadding->None], 
        GraphicsBox[
         TagBox[RasterBox[CompressedData["
1:eJzdmc9vE0cUxyNAosfeckGIXnujJy6tVKk9VOLStFVz4AIlRD00VQMSouXQ
/hEIIfXAta0qFTggkBqpCA40CSUJtKX8ik1i4ti7XjuJfyQkw/uud52345nx
7I+A1cM3tuPdnfeZN+/HjN869vXQiV0DAwMn36A/Q0dPvz8+fvTMJ2/Sh8/G
Tn45OjZy/KOxUyOjI+OHju2mf74TaA9JCPG/kdfaTKr9pCOkC6TbpBJJBNoi
FUk3SedIw6TBFGMplZJjnPQ7szmOrpNGXzPHWdLdhPbLukUae8UcB1PMfy9d
JR14BRznTXaU1tbFvLMq/lmqirsLrpjMlcWf8yVf0/R+ZtEV/xZrIl+pC6ex
oXtOjfQp3TMQV5YcP+rsX/AaYrZQ6dhsoykSeIsrLR3P+R3gUDIsrbbE7GI8
+1X6u1gV5brSP7FYenAo19ITdy21/Vx38mWxWG2oWIYy4DioYniwXMuUgStH
8yON55L2peToyks7yRAKeUAa90oKjrNJ1hLi9z7FL+a1QDFcWtsQy6vrtGaa
4rFbt84HhVpTZjmekCNS4xDTvcZ+sLxC8fpCVFpbEXmBws9LxHXvuWd81vQz
R7iNF5zjRgKOb2RfmPLSFMVoe/7IzuZmx94Zdg/e+98F3+Pap7R+TCz/lVZk
nwzH5IjEBeqDiQHz68nzTvZ2cYScgXBt3sAymSvJ+fhyDI79Xb4wrOlCrRXM
72Ysf4QceP/Y0cfdw/Kq7JO9lhxH+H3oNcx+34qul/VtFq0/ePz4n6O+47qT
d2SODy05LvD70C/p8pIf02y9VyQmFUd43fZr+/oFyme6+ZJ6lx8sOW5zDvRA
qmcjt8p283Wvio9O/ATXyPGEuVeNNe9E6sklSw6+j/P7VtWzc24jErN8vXuG
+JBjiAu9sGos1F5m0z1Ljsh65L13JL59X7dt1YnfO+n37fpr/Xh31bkLtYbZ
VEjCoVuzqNMYW/d9XMFHuhyMfMlsqlpybNlwFNc2fH9kxmGoJXOFiD+eWXIU
Oce0Zl2hXwpjOYt15RnqCHIKs+kvS46bnAN7UdWzsZbDnNlV23R5l8W3Jwnf
3dfkRqk/+dWS4xzn0OWQuQKrB5J94asq77ZZN4UncZeb+pySr0T2JN9Zcgxz
DlP/E/ZVPOdymfqrSB9AelrR93DoKZhN71lyDHIOnGtMaZ6PfMgZqlIdUXJI
9Q+vTkNfA2eofkk5dI8lB3TNpqZDTyhOIvWczbOuT5TXFM4ZdM+XavnPOgYN
xyjnQH+jG6e9frdZtmPX3LeH/nhYUvdvEPYEbjOylzockwO6xVlMc+bnL8qZ
jrTvU3GEa8/1/WDe60u+mDAxGDi+4hzYz+BsxjQubM1jPyL1XTyvlf2Yrmvj
gQt1nO1tq6S3E3BAVzkLzpd6jQ3BRuRr+AhrDj3lI9oPoT7ocmsWLAaOA8G9
LA9ne/6WJUuP88QhuXc01ZTXyWJxvtt1Nvp8pemfzfQTi+V5excLnoneB+ca
SW1D7kDc257PmVhi/P7xMcmReZDLcK4Rxz/oP2F/WB9gW1qWmL9H7SNdkVl4
zUTex14UfQv6SewfkKvgO8TWcn1deW9aloS/D35B+kPHE1MTYV7MiiUGR6jP
SZcT2v+TF/QasCFLlgQcofaSPiB9T/qNNEtaJHmkHGmK9AvpW9K7pN1y3syK
JSWHsfexVVKWOXYW0Q8cSViQ9/lvcv3CEYdFZug3DhsWFUM/cphYdAz9yqFi
QUzrGEgX03LssDosBl1MUQf7haXD8BJ6c/TW
           "], {{0, 50.}, {50., 0}}, {0, 255},
           ColorFunction->RGBColor],
          BoxForm`ImageTag[
          "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
           0.5],
          Selectable->False],
         DefaultBaseStyle->"ImageGraphics",
         ImageSize->Magnification[0.5],
         ImageSizeRaw->{50., 50.},
         PlotRange->{{0, 50.}, {0, 50.}}]},
        Alignment->{-0.85, Center}], False->
       OverlayBox[{
        GraphicsBox[
         {RGBColor[0, 
           NCache[
            Rational[2, 3], 0.6666666666666666], 1], Opacity[0], 
          RectangleBox[{-360, -40}, {360, 40}]},
         ImagePadding->None,
         ImageSize->{720, 80},
         PlotRangePadding->None], 
        GraphicsBox[
         TagBox[RasterBox[CompressedData["
1:eJztmctL1FEUx4cUbNnOjYht29mqTUFQi6BNU5ELN5omLZpIg6hc1B8hIrRo
WxGULqQgoZzxAer4yPcDZJzxnY6Kb+Z2vsPMdOd67/3d30NnFh34huXv3ns+
93HOubeL1U/9j875fL6G8/SHv+rF9fr6qpd3L9Bf7gcaHtcFamtuBZ7X1tXW
X6kuoH+8nFIhiTH2X4yVkipJLaRe0ir7ZwnSMilIaiJVkIrzwGde9aQfzJl9
J9Xl2P9G0qBD/0ULkQJn7H85cz7/VtZOKjsDhmadE7u7u2xhYYGNjY2xvr4+
FgqFWGdnZ1JdXV1sYGCATU5OsqWlJXZ4eKjqZot0j9r47MqQ4Z1q4NXVVTY4
OJjx2UTBYDDJu7W1peq2+RQ4pAzb29ssHA7b8l+m8fFxdnBw4JrFgkG6lyKR
SHJO3TKk1d3dzdbX12VD+T3gKBc7TSQSbGpqyjP/RS0uLopD/iGVuOQ4EZdO
k0HD0uaCo1G2l6x8wF4bHR1N+hKPx9ne3l4yjm1sbCTbm8aDzc1NcfgahxxZ
OQ5n2uo8TE9Pq84rE/saGRnR9tXb28uOjo74Zr8ccDwTx9bFJZxRzLdoyBfp
b/CzaNFoVMsyMzMjNqmwyZF1LpAfdAw7OzvSebfigK2srGj36P7+Pv95qw2O
UnEs3Z6WrYMdDtj8/Lyy/7m5OfHzIkOOSr4RzqjuPOjMlAOxnP9WPCeC3TTk
aOEboV5SrbnVmTblgK2trSnnS6hd3hpyZE0AaiBZ34itVmaHA2vS09MjHQtz
ydlXQw7+HpesW2V9S3KVKw7YxMSEdCzkXs5+G3JkGV9780KOS/uqEt8WP+u+
hanyLHINZzEnHKo9izyt+71dwXAvkf0O8ZKzuCFHwoQDceysOIaHh3mXIoYc
y3wj3ONkfafzhpf7SpVHhJgSNuQI8o1UcR172crsnnP4KxtLqE8+G3I08Y1w
nzbYs645jo+PlTFFiI2vDTkq+EaqPQuhbvWKIxaLWcaUlF0z5CjmG+FdQ1Wv
C/HQMQfqc1UO7O/vFz8vNOSAvvENVTkdEnKtIw68Mxj2/1HFoOCo4xujvlGN
A6H2dsoxOzur7Bd3Apwbzm7b5IBCpnMGIWaiRjLlwF6y6lNYiw4dg4bjCd8J
alvMj25c+Iq6VeThDfOLe6DqPPBCTOTutiiELjnggNp5H/C+ZDU2BB9R8yHH
IN4hbmK9kB9UsdULFg1HWaptxuCTHT+8kCmLhgPyi3sDc+zlW6JXLBYc0Im3
Ubwv4c6ZTywGHFIW9Inax83aIHbg3Ju+z+lYDDmgO6QTj8l4m8G7hp31QWyD
/+n8AN/cstjggEpIbSJL2pAzEfdxF0XdMjQ0lLw/IFZh7XC2hHopa33dsNjk
SOsh6aeKx6Z1pHzJFQv0gNTq0P8PLFVrpHzINQtURLpBekP6QsJlNErCw/k8
qY/0ifSKdJVUIImbXrG44dDWPqZyyoJzyFnOOZywIO4L/yeXFxx2WCQMecVh
wqJgyDsOHYuGIS85ZCw40xqG9245TlkZFo3lO4MJS4bhL7E9ExQ=
           "], {{0, 50.}, {50., 0}}, {0, 255},
           ColorFunction->RGBColor],
          BoxForm`ImageTag[
          "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
           0.5],
          Selectable->False],
         DefaultBaseStyle->"ImageGraphics",
         ImageSize->Magnification[0.5],
         ImageSizeRaw->{50., 50.},
         PlotRange->{{0, 50.}, {0, 50.}}]},
        Alignment->{-0.85, Center}]}, Dynamic[
        CurrentValue["MouseOver"]]], Scaled[{0, 0}], Scaled[{0, 0}]]},
    AspectRatio->Full,
    ImagePadding->None,
    ImageSize->{720, 80},
    PlotRangePadding->None]],
  MouseAppearanceTag["LinkHand"]]], "NotesThumbnails",
 CellID->32646656,ExpressionUUID->"dd29cf4b-78d9-4453-975c-2566ce17d9d2"],

Cell["", "ExampleSectionDelimiter",
 CellID->835655171,ExpressionUUID->"b9f943ec-621a-477a-bb10-4fa03a9870d6"],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData[{"Examples", "\[NonBreakingSpace]\[NonBreakingSpace]", 
      Cell["(3)", "ExampleCount"]}]], 6, {
   TaggingRules, "Openers", "PrimaryExamplesSection", "0"}, 
   RGBColor[
    Rational[217, 255], 
    Rational[101, 255], 0]},
  "SectionOpener"]], "PrimaryExamplesSection", "PrimaryExamplesSection",
 WholeCellGroupOpener->True,
 CellID->147763668,ExpressionUUID->"6f90de2a-759e-439d-821b-87ddf9133e0f"],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData[{"Basic examples", "\[NonBreakingSpace]\[NonBreakingSpace]", 
      Cell["(1)", "ExampleCount"]}]], 0, {
   TaggingRules, "Openers", "ExampleSection", "0"}, 
   RGBColor[
    Rational[217, 255], 
    Rational[101, 255], 0]},
  "SectionOpener"]], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->71310016,ExpressionUUID->"4add4f0d-76a8-40c5-a5ea-317ffa437bff"],

Cell["Load the EinsteinSummation package:", "ExampleText",
 CellID->128775739,ExpressionUUID->"c42b5e47-9e77-4b2a-bb99-835e5a728aaf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Get", "[", "\"\<EinsteinSummation`\>\"", "]"}]], "Input",
 InitializationCell->False,
 CellLabel->"In[1]:=",
 CellID->91212369,ExpressionUUID->"720d2411-373c-44d6-be29-5ccdd4d047ff"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     ButtonBox["\<\"Einstein Summation Package Guide \[RightSkeleton]\"\>",
      Appearance->Automatic,
      BaseStyle->"Link",
      ButtonData->
       "paclet:EinsteinSummation/ReferencePages/Guides/\
TensorExpressionswithEinsteinSummation",
      Evaluator->Automatic,
      Method->"Preemptive"]},
    {
     ButtonBox["\<\"Einstein Summation Tutorial \[RightSkeleton]\"\>",
      Appearance->Automatic,
      BaseStyle->"Link",
      ButtonData->
       "paclet:EinsteinSummation/ReferencePages/Tutorials/EinsteinSummation",
      Evaluator->Automatic,
      Method->"Preemptive"]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {{0}}}],
  "Column"]], "Print",
 CellContext->"Notebook$$300$427466`",
 CellLabel->"\:6b63\:5728\:8ba1\:7b97In[1]:=",
 CellID->316135893,ExpressionUUID->"099cc4a1-f9f7-4a3c-925d-a70478073ff7"]
}, Open  ]],

Cell[TextData[{
 "Initially ",
 Cell[BoxData[
  TemplateBox[{
   "$TensorDefinitions", 
    "paclet:EinsteinSummation/ReferencePages/Symbols/$TensorDefinitions"},
   "RefLink",
   BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
  "6c45f2d4-c21a-46e2-9e1c-17b8947d820d"],
 " will have metric and affine connection's definition."
}], "ExampleText",
 CellID->562666598,ExpressionUUID->"2c25604e-bae1-440b-b528-103345d6a369"],

Cell[CellGroupData[{

Cell[BoxData["$TensorDefinitions"], "Input",
 InitializationCell->False,
 CellLabel->"In[2]:=",
 CellID->50765364,ExpressionUUID->"13e7fc61-97b9-405f-b09b-cb33d44786b4"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {-1, -1}, 
        "Value" -> SparseArray[
         Automatic, {4, 4}, 0, {
          1, {{0, 1, 2, 3, 4}, {{1}, {2}, {3}, {4}}}, {-1, 1, 1, 1}}]], 
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {1, 1}, 
        "Value" -> {{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}], 
       Association[
       "Symbol" -> "\[CapitalGamma]", "Dimensions" -> 3, 
        "IndexPosition" -> {1, -1, -1}, 
        "Value" -> {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 
         0}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 
         0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {
         0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}]}, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[28.800000000000004`],
             "Dimensions" -> TypeSystem`PackageScope`AtomShape[34], 
            "IndexPosition" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Value" -> TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 3, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 3], "Meta" -> 
     Association["ID" -> 88665506791967], "RowTarget" -> 20, "ColumnTarget" -> 1\
0, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[28.800000000000004`],
             "Dimensions" -> TypeSystem`PackageScope`AtomShape[34], 
            "IndexPosition" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Value" -> TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 3, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 3], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 3, "DisplayedColumnCount" -> 4, "DataRowCount" -> 
     3, "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Symbol", 
                    Style[
                    "Symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Symbol"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Symbol"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Dimensions", 
                    Style[
                    "Dimensions", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Dimensions"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Dimensions"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["IndexPosition", 
                    Style[
                    "IndexPosition", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "IndexPosition"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "IndexPosition"}, "ColumnHeader", True], "Mouse"], " ",
                 ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Value", 
                    Style[
                    "Value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Value"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Value"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1, -1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 
                   1}}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0,
                     1}}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["\[CapitalGamma]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, -1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, -1, -1}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{554., {77.42857142857143, 82.57142857142857}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{554., {77.42857142857143, 82.57142857142857}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellContext->"Notebook$$32$421021`",
 CellLabel->"Out[2]=",
 CellID->230733877,ExpressionUUID->"6b1c32a2-2991-4004-bc00-9fd7f7b934a8"]
}, Open  ]],

Cell[TextData[{
 "You can add to ",
 Cell[BoxData[
  TemplateBox[{
   "$TensorDefinitions", 
    "paclet:EinsteinSummation/ReferencePages/Symbols/$TensorDefinitions"},
   "RefLink",
   BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
  "1fe0401e-c64c-46b0-8852-f97395ac2c15"],
 " using ",
 Cell[BoxData[
  TemplateBox[{
   "AddTensorToDataset", 
    "paclet:EinsteinSummation/ReferencePages/Symbols/AddTensorToDataset"},
   "RefLink",
   BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
  "b4fa4f9c-b0fb-4350-82e0-85bcab2013e4"],
 ":"
}], "ExampleText",
 CellID->485329844,ExpressionUUID->"8959df1f-cece-4f70-ac09-b2fd37081031"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AddTensorToDataset", "[", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["$tensorSymb",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              StyleBox[
               PaneBox[
                TemplateBox[{
                  TemplateBox[{
                    StyleBox["\"A\"", Bold, 24., StripOnInput -> False]}, 
                   "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                  TagBox[
                   
                   GridBox[{{"\"\""}, {"\"\[Mu]\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                   RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                   Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                ImageSize -> {
                  UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                  UpTo[174], 38.57142857142857}], 
               LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
               False], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"A\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              StyleBox[
               PaneBox[
                TemplateBox[{
                  TemplateBox[{
                    StyleBox["\"A\"", Bold, 24., StripOnInput -> False]}, 
                   "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                  TagBox[
                   
                   GridBox[{{"\"\""}, {"\"\[Mu]\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                   RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                   Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                ImageSize -> {
                  UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                  UpTo[174], 38.57142857142857}], 
               LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
               False], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"A\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Index Name: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", "\"\[Mu]\"", "}"}], ",", "0.4`"}], "]"}], 
                    "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Index Position: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"-", "1"}], "}"}], ",", "0.4`"}], "]"}], 
                    "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Symmetry Marker: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], ",", 
                    "0.4`"}], "]"}], "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    EinsteinSummation`$tensorSymb[
     Association[
     "Symbol" -> "A", "IndexName" -> {"\[Mu]"}, "Dimensions" -> 1, 
      "IndexPosition" -> {-1}, "SymmetryMarker" -> 
      Association[-1 -> {}, 1 -> {}]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   RowBox[{"{", 
    RowBox[{"at", ",", "ax", ",", "ay", ",", "az"}], "}"}]}], 
  "]"}], "\n", "$TensorDefinitions"}], "Input",
 InitializationCell->False,
 CellLabel->"In[3]:=",
 CellID->222847755,ExpressionUUID->"ae0311b3-2528-4e82-ac50-074d9a2e8ea7"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {-1, -1}, 
        "Value" -> SparseArray[
         Automatic, {4, 4}, 0, {
          1, {{0, 1, 2, 3, 4}, {{1}, {2}, {3}, {4}}}, {-1, 1, 1, 1}}]], 
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {1, 1}, 
        "Value" -> {{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}], 
       Association[
       "Symbol" -> "\[CapitalGamma]", "Dimensions" -> 3, 
        "IndexPosition" -> {1, -1, -1}, 
        "Value" -> {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 
         0}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 
         0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {
         0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}], 
       Association[
       "Symbol" -> "A", "Dimensions" -> 1, "IndexPosition" -> {-1}, 
        "Value" -> {$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}]}, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[28.800000000000004`],
             "Dimensions" -> TypeSystem`PackageScope`AtomShape[34], 
            "IndexPosition" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Value" -> TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 4, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 4], "Meta" -> 
     Association["ID" -> 88674096726563], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[28.800000000000004`],
             "Dimensions" -> TypeSystem`PackageScope`AtomShape[34], 
            "IndexPosition" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Value" -> TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 4, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 4], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 4, "DisplayedColumnCount" -> 4, "DataRowCount" -> 
     4, "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Symbol", 
                    Style[
                    "Symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Symbol"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Symbol"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Dimensions", 
                    Style[
                    "Dimensions", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Dimensions"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Dimensions"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["IndexPosition", 
                    Style[
                    "IndexPosition", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "IndexPosition"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "IndexPosition"}, "ColumnHeader", True], "Mouse"], " ",
                 ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Value", 
                    Style[
                    "Value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Value"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Value"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1, -1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 
                   1}}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0,
                     1}}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["\[CapitalGamma]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, -1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, -1, -1}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation["A", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{554., {89.42857142857143, 94.57142857142857}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{554., {89.42857142857143, 94.57142857142857}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellContext->"Notebook$$32$421021`",
 CellLabel->"Out[4]=",
 CellID->380574044,ExpressionUUID->"db7482b6-d439-4713-8c6e-b2583235695f"]
}, Open  ]],

Cell[TextData[{
 "Use values stored in ",
 Cell[BoxData[
  TemplateBox[{
   "$TensorDefinitions", 
    "paclet:EinsteinSummation/ReferencePages/Symbols/$TensorDefinitions"},
   "RefLink",
   BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
  "13c4e580-9b43-4ab1-b77c-b70659556509"],
 " for further evaluation."
}], "ExampleText",
 CellID->380669673,ExpressionUUID->"1410674b-657d-43fd-baa4-8636d9e4205e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"res", "=", 
  RowBox[{"EvaluateEinsteinSummation", "[", 
   RowBox[{
    InterpretationBox[
     RowBox[{
      TagBox["$tensorSymb",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               StyleBox[
                PaneBox[
                 TemplateBox[{
                   TemplateBox[{
                    StyleBox[
                    "\"\[PartialD]\"", Bold, 24., StripOnInput -> False]}, 
                    "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                   TagBox[
                    
                    GridBox[{{"\"\""}, {"\"\[Nu]\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                 ImageSize -> {
                   UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                 "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                   UpTo[174], 38.57142857142857}], 
                LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
                False], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\[PartialD]\"", "SummaryItem"]}], 
                  "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               StyleBox[
                PaneBox[
                 TemplateBox[{
                   TemplateBox[{
                    StyleBox[
                    "\"\[PartialD]\"", Bold, 24., StripOnInput -> False]}, 
                    "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                   TagBox[
                    
                    GridBox[{{"\"\""}, {"\"\[Nu]\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                 ImageSize -> {
                   UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                 "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                   UpTo[174], 38.57142857142857}], 
                LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
                False], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\[PartialD]\"", "SummaryItem"]}], 
                  "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Index Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", "\"\[Nu]\"", "}"}], ",", "0.4`"}], "]"}], 
                    "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Index Position: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"-", "1"}], "}"}], ",", "0.4`"}], "]"}], 
                    "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Symmetry Marker: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], ",", 
                    "0.4`"}], "]"}], "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     EinsteinSummation`$tensorSymb[
      Association[
      "Symbol" -> "\[PartialD]", "IndexName" -> {"\[Nu]"}, "Dimensions" -> 1, 
       "IndexPosition" -> {-1}, "SymmetryMarker" -> 
       Association[-1 -> {}, 1 -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False], "\[CircleDot]", 
    InterpretationBox[
     RowBox[{
      TagBox["$tensorSymb",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               StyleBox[
                PaneBox[
                 TemplateBox[{
                   TemplateBox[{
                    StyleBox["\"A\"", Bold, 24., StripOnInput -> False]}, 
                    "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                   TagBox[
                    
                    GridBox[{{"\"\[Mu]\""}, {"\"\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                 ImageSize -> {
                   UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                 "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                   UpTo[174], 38.57142857142857}], 
                LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
                False], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"A\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, Evaluator -> Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               StyleBox[
                PaneBox[
                 TemplateBox[{
                   TemplateBox[{
                    StyleBox["\"A\"", Bold, 24., StripOnInput -> False]}, 
                    "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                   TagBox[
                    
                    GridBox[{{"\"\[Mu]\""}, {"\"\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                 ImageSize -> {
                   UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                 "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                   UpTo[174], 38.57142857142857}], 
                LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
                False], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"A\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Index Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", "\"\[Mu]\"", "}"}], ",", "0.4`"}], "]"}], 
                    "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Index Position: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "0.4`"}], "]"}], 
                    "SummaryItem"]}], "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"Symmetry Marker: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], ",", 
                    "0.4`"}], "]"}], "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     EinsteinSummation`$tensorSymb[
      Association[
      "Symbol" -> "A", "IndexName" -> {"\[Mu]"}, "Dimensions" -> 1, 
       "IndexPosition" -> {1}, "SymmetryMarker" -> 
       Association[-1 -> {}, 1 -> {}]]],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], "]"}]}]], "Input",
 InitializationCell->False,
 CellLabel->"In[5]:=",
 CellID->97146153,ExpressionUUID->"45eff8ee-1452-4575-809e-54a178fc5ffa"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["$tensorSymb",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            StyleBox[
             PaneBox[
              TemplateBox[{
                TemplateBox[{
                  StyleBox["\"T$222\"", Bold, 24., StripOnInput -> False]}, 
                 "Row", DisplayFunction -> (
                  PaneBox[#, BaselinePosition -> Center]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                TagBox[
                 
                 GridBox[{{"\"\"", "\"\[Mu]\""}, {"\"\[Nu]\"", "\"\""}}, 
                  GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                  False, GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0}}, "Rows" -> {0, {1.157142857142857}, 0}},
                   BaselinePosition -> Center], "Grid"]}, "Row", 
               DisplayFunction -> (PaneBox[
                 RowBox[{
                   TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                 Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
              ImageSize -> {
                UpTo[139], 38.57142857142857}, ImageSizeAction -> 
              "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                UpTo[174], 38.57142857142857}], 
             LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
             False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"T$222\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            StyleBox[
             PaneBox[
              TemplateBox[{
                TemplateBox[{
                  StyleBox["\"T$222\"", Bold, 24., StripOnInput -> False]}, 
                 "Row", 
                 DisplayFunction -> (
                  PaneBox[#, BaselinePosition -> Center]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                TagBox[
                 
                 GridBox[{{"\"\"", "\"\[Mu]\""}, {"\"\[Nu]\"", "\"\""}}, 
                  GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                  False, GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0}}, "Rows" -> {0, {1.157142857142857}, 0}},
                   BaselinePosition -> Center], "Grid"]}, "Row", 
               DisplayFunction -> (PaneBox[
                 RowBox[{
                   TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                 Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
              ImageSize -> {
                UpTo[139], 38.57142857142857}, ImageSizeAction -> 
              "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                UpTo[174], 38.57142857142857}], 
             LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
             False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"T$222\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Index Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"\"\[Nu]\"", ",", "\"\[Mu]\""}], "}"}], 
                   Short[#, 0.4]& ], "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Index Position: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}], Short[#, 0.4]& ], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Symmetry Marker: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], 
                   Short[#, 0.4]& ], "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Value: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               TagBox[
                TagBox[
                 RowBox[{"{", 
                   RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                   "}"}], Short[#, 0.8]& ], "SummaryItem"], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  EinsteinSummation`$tensorSymb[
   Association[
   "Symbol" -> "T$222", "IndexName" -> {"\[Nu]", "\[Mu]"}, "Dimensions" -> 2, 
    "IndexPosition" -> {-1, 1}, "SymmetryMarker" -> 
    Association[-1 -> {}, 1 -> {}], 
    "Value" -> {{-
       Dt[$CellContext`at, EinsteinSummation`t, 
         Constants -> {
          EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
       Dt[$CellContext`ax, EinsteinSummation`t, 
        Constants -> {
         EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
       Dt[$CellContext`ay, EinsteinSummation`t, 
        Constants -> {
         EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
       Dt[$CellContext`az, EinsteinSummation`t, 
        Constants -> {
         EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]}, {-
       Dt[$CellContext`at, EinsteinSummation`x, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
       Dt[$CellContext`ax, EinsteinSummation`x, 
        Constants -> {
         EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
       Dt[$CellContext`ay, EinsteinSummation`x, 
        Constants -> {
         EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
       Dt[$CellContext`az, EinsteinSummation`x, 
        Constants -> {
         EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]}, {-
       Dt[$CellContext`at, EinsteinSummation`y, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
       Dt[$CellContext`ax, EinsteinSummation`y, 
        Constants -> {
         EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
       Dt[$CellContext`ay, EinsteinSummation`y, 
        Constants -> {
         EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
       Dt[$CellContext`az, EinsteinSummation`y, 
        Constants -> {
         EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}]}, {-
       Dt[$CellContext`at, EinsteinSummation`z, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
       Dt[$CellContext`ax, EinsteinSummation`z, 
        Constants -> {
         EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
       Dt[$CellContext`ay, EinsteinSummation`z, 
        Constants -> {
         EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
       Dt[$CellContext`az, EinsteinSummation`z, 
        Constants -> {
         EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}]}}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellContext->"Notebook$$32$421021`",
 CellLabel->"Out[5]=",
 CellID->517444758,ExpressionUUID->"208fe64c-15de-44c8-bddb-a22f968f8080"]
}, Open  ]],

Cell["Store the evaluation result as another tensor T:", "ExampleText",
 CellID->45602359,ExpressionUUID->"718e2a23-f458-4b43-a98a-1d9e3f5e7e86"],

Cell[BoxData[
 RowBox[{"AddTensorToDataset", "[", 
  RowBox[{"\"\<T\>\"", ",", "res"}], "]"}]], "Input",
 InitializationCell->False,
 CellLabel->"In[6]:=",
 CellID->985286619,ExpressionUUID->"8af39dca-fb31-461e-9fa3-b6f80f4b9f04"],

Cell["Use T in further evaluations:", "ExampleText",
 CellID->509327691,ExpressionUUID->"6e3f2743-8bc8-41ca-8e01-d845e462fcf2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvaluateEinsteinSummation", "[", 
  RowBox[{
   InterpretationBox[
    RowBox[{
     TagBox["$tensorSymb",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              StyleBox[
               PaneBox[
                TemplateBox[{
                  TemplateBox[{
                    StyleBox[
                    "\"\[PartialD]\"", Bold, 24., StripOnInput -> False]}, 
                   "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                  TagBox[
                   
                   GridBox[{{"\"\"", "\"\""}, {"\"(\"", "\"\[Nu]\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                   RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                   Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                ImageSize -> {
                  UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                  UpTo[174], 38.57142857142857}], 
               LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
               False], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"\[PartialD]\"", "SummaryItem"]}], 
                 "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              StyleBox[
               PaneBox[
                TemplateBox[{
                  TemplateBox[{
                    StyleBox[
                    "\"\[PartialD]\"", Bold, 24., StripOnInput -> False]}, 
                   "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                  TagBox[
                   
                   GridBox[{{"\"\"", "\"\""}, {"\"(\"", "\"\[Nu]\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                   RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                   Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                ImageSize -> {
                  UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                  UpTo[174], 38.57142857142857}], 
               LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
               False], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"\[PartialD]\"", "SummaryItem"]}], 
                 "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Index Name: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", "\"\[Nu]\"", "}"}], ",", "0.4`"}], "]"}], 
                    "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Index Position: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"-", "1"}], "}"}], ",", "0.4`"}], "]"}], 
                    "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Symmetry Marker: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "\"(\""}], "}"}], "}"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], ",", 
                    "0.4`"}], "]"}], "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    EinsteinSummation`$tensorSymb[
     Association[
     "Symbol" -> "\[PartialD]", "IndexName" -> {"\[Nu]"}, "Dimensions" -> 1, 
      "IndexPosition" -> {-1}, "SymmetryMarker" -> 
      Association[-1 -> {{1, "("}}, 1 -> {}]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], "\[CircleDot]", 
   InterpretationBox[
    RowBox[{
     TagBox["$tensorSymb",
      "SummaryHead"], "[", 
     DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
      "Ready"}, 
      TemplateBox[{
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              StyleBox[
               PaneBox[
                TemplateBox[{
                  TemplateBox[{
                    StyleBox["\"T\"", Bold, 24., StripOnInput -> False]}, 
                   "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                  TagBox[
                   
                   GridBox[{{"\"\"", "\"\"", "\"\[Rho]\""}, {
                    "\"\[Sigma]\"", "\")\"", "\"\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, 
                    GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                   RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                   Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                ImageSize -> {
                  UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                  UpTo[174], 38.57142857142857}], 
               LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
               False], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"T\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 
                  3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                   Magnification])}]], 
              StyleBox[
               PaneBox[
                TemplateBox[{
                  TemplateBox[{
                    StyleBox["\"T\"", Bold, 24., StripOnInput -> False]}, 
                   "Row", DisplayFunction -> (
                    PaneBox[#, BaselinePosition -> Center]& ), 
                   InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                  TagBox[
                   
                   GridBox[{{"\"\"", "\"\"", "\"\[Rho]\""}, {
                    "\"\[Sigma]\"", "\")\"", "\"\""}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxFrame -> {
                    "Columns" -> None, "Rows" -> None}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                    Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                   RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                   Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
                ImageSize -> {
                  UpTo[139], 38.57142857142857}, ImageSizeAction -> 
                "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                  UpTo[174], 38.57142857142857}], 
               LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
               False], 
              GridBox[{{
                 RowBox[{
                   TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"T\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Index Name: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\"\[Sigma]\"", ",", "\"\[Rho]\""}], "}"}], ",", 
                    "0.4`"}], "]"}], "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Index Position: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "0.4`"}], 
                    "]"}], "SummaryItem"]}], "\[SpanFromLeft]"}, {
                 RowBox[{
                   TagBox["\"Symmetry Marker: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                    RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "\")\""}], "}"}], "}"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], ",", 
                    "0.4`"}], "]"}], "SummaryItem"]}], "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic]},
       "SummaryPanel"],
      DynamicModuleValues:>{}], "]"}],
    EinsteinSummation`$tensorSymb[
     Association[
     "Symbol" -> "T", "IndexName" -> {"\[Sigma]", "\[Rho]"}, "Dimensions" -> 
      2, "IndexPosition" -> {-1, 1}, "SymmetryMarker" -> 
      Association[-1 -> {{2, ")"}}, 1 -> {}]]],
    Editable->False,
    SelectWithContents->True,
    Selectable->False]}], "]"}]], "Input",
 InitializationCell->False,
 CellLabel->"In[7]:=",
 CellID->109798159,ExpressionUUID->"8bc259e6-7e83-46c2-b2b0-9399b83b6909"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["$tensorSymb",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            StyleBox[
             PaneBox[
              TemplateBox[{
                TemplateBox[{
                  StyleBox["\"T$223\"", Bold, 24., StripOnInput -> False]}, 
                 "Row", DisplayFunction -> (
                  PaneBox[#, BaselinePosition -> Center]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                TagBox[
                 
                 GridBox[{{"\"\"", "\"\"", "\"\[Rho]\""}, {
                   "\"\[Nu]\"", "\"\[Sigma]\"", "\"\""}}, 
                  GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                  False, GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0}}, "Rows" -> {0, {1.157142857142857}, 0}},
                   BaselinePosition -> Center], "Grid"]}, "Row", 
               DisplayFunction -> (PaneBox[
                 RowBox[{
                   TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                 Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
              ImageSize -> {
                UpTo[139], 38.57142857142857}, ImageSizeAction -> 
              "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                UpTo[174], 38.57142857142857}], 
             LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
             False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"T$223\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            StyleBox[
             PaneBox[
              TemplateBox[{
                TemplateBox[{
                  StyleBox["\"T$223\"", Bold, 24., StripOnInput -> False]}, 
                 "Row", 
                 DisplayFunction -> (
                  PaneBox[#, BaselinePosition -> Center]& ), 
                 InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                TagBox[
                 
                 GridBox[{{"\"\"", "\"\"", "\"\[Rho]\""}, {
                   "\"\[Nu]\"", "\"\[Sigma]\"", "\"\""}}, 
                  GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                  False, GridBoxFrame -> {"Columns" -> None, "Rows" -> None}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{0}}, "Rows" -> {0, {1.157142857142857}, 0}},
                   BaselinePosition -> Center], "Grid"]}, "Row", 
               DisplayFunction -> (PaneBox[
                 RowBox[{
                   TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                 Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                  RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
              ImageSize -> {
                UpTo[139], 38.57142857142857}, ImageSizeAction -> 
              "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                UpTo[174], 38.57142857142857}], 
             LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
             False], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"T$223\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["3", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Index Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"{", 
                    
                    RowBox[{
                    "\"\[Nu]\"", ",", "\"\[Sigma]\"", ",", "\"\[Rho]\""}], 
                    "}"}], Short[#, 0.4]& ], "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Index Position: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}], ",", "1"}], "}"}], Short[#, 0.4]& ], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Symmetry Marker: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], 
                   Short[#, 0.4]& ], "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Value: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
               TagBox[
                TagBox[
                 InterpretationBox[
                  RowBox[{
                    TagBox["SparseArray", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[
                    RasterBox[
                    SparseArray[
                    Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                    0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameLabel -> {None, None}, 
                    FrameTicks -> {{None, None}, {None, None}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["64", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4", ",", "4"}], "}"}], 
                    "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    GraphicsBox[
                    RasterBox[
                    SparseArray[
                    Automatic, {10, 10}, 0.93, {
                    1, {{0, 1, 1, 4, 4, 5, 6, 6, 8, 10, 13}, {{4}, {6}, {7}, {
                    10}, {5}, {9}, {3}, {8}, {5}, {7}, {2}, {3}, {7}}}, {0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}}], {{0, 
                    0}, {10, 10}}, {0, 1}], Frame -> False, Axes -> False, 
                    AspectRatio -> 1, ImageSize -> 
                    Dynamic[{Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                    FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameLabel -> {None, None}, 
                    FrameTicks -> {{None, None}, {None, None}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["64", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4", ",", "4"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1.`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"-", 
                    RowBox[{"Dt", "[", 
                    RowBox[{"at", ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", "2"}], "}"}], ",", 
                    RowBox[{"Constants", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}]}], "]"}]}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Dt", "[", 
                    RowBox[{"ax", ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", "2"}], "}"}], ",", 
                    RowBox[{"Constants", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}]}], "]"}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Dt", "[", 
                    RowBox[{"ay", ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", "2"}], "}"}], ",", 
                    RowBox[{"Constants", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}]}], "]"}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "4"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    RowBox[{"Dt", "[", 
                    RowBox[{"az", ",", 
                    RowBox[{"{", 
                    RowBox[{"t", ",", "2"}], "}"}], ",", 
                    RowBox[{"Constants", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}]}], "]"}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    ItemBox[
                    "\"\[VerticalEllipsis]\"", Alignment -> Center, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                  SparseArray[
                  Automatic, {4, 4, 4}, 0, {
                   1, {{0, 16, 32, 48, 64}, {{1, 1}, {1, 2}, {1, 3}, {1, 4}, {
                    2, 1}, {2, 2}, {2, 3}, {2, 4}, {3, 1}, {3, 2}, {3, 3}, {3,
                     4}, {4, 1}, {4, 2}, {4, 3}, {4, 4}, {1, 1}, {1, 2}, {1, 
                    3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {3, 1}, {3, 
                    2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 4}, {1, 
                    1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {2, 
                    4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 
                    3}, {4, 4}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 
                    2}, {2, 3}, {2, 4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 
                    1}, {4, 2}, {4, 3}, {4, 4}}}, {-
                    Dt[$CellContext`at, {EinsteinSummation`t, 2}, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], 
                    Dt[$CellContext`ax, {EinsteinSummation`t, 2}, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], 
                    Dt[$CellContext`ay, {EinsteinSummation`t, 2}, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], 
                    Dt[$CellContext`az, {EinsteinSummation`t, 2}, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), -
                    Dt[$CellContext`at, {EinsteinSummation`x, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], 
                    Dt[$CellContext`ax, {EinsteinSummation`x, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], 
                    Dt[$CellContext`ay, {EinsteinSummation`x, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], 
                    Dt[$CellContext`az, {EinsteinSummation`x, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), -
                    Dt[$CellContext`at, {EinsteinSummation`y, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], 
                    Dt[$CellContext`ax, {EinsteinSummation`y, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], 
                    Dt[$CellContext`ay, {EinsteinSummation`y, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], 
                    Dt[$CellContext`az, {EinsteinSummation`y, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}]), 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`t, 
                    Constants -> {
                    EinsteinSummation`x, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`x, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`y, 
                    EinsteinSummation`z}]), 
                    Rational[
                    1, 2] (-
                    Dt[Dt[$CellContext`at, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] - Dt[
                    Dt[$CellContext`at, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}]), 
                    Rational[1, 2] (
                    Dt[Dt[$CellContext`az, EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}], EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}] + 
                    Dt[Dt[$CellContext`az, EinsteinSummation`z, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], EinsteinSummation`y, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`z}]), -
                    Dt[$CellContext`at, {EinsteinSummation`z, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], 
                    Dt[$CellContext`ax, {EinsteinSummation`z, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], 
                    Dt[$CellContext`ay, {EinsteinSummation`z, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}], 
                    Dt[$CellContext`az, {EinsteinSummation`z, 2}, 
                    Constants -> {
                    EinsteinSummation`t, EinsteinSummation`x, 
                    EinsteinSummation`y}]}}], Selectable -> False, Editable -> 
                  False, SelectWithContents -> True], Short[#, 0.8]& ], 
                "SummaryItem"], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  EinsteinSummation`$tensorSymb[
   Association[
   "Symbol" -> "T$223", "IndexName" -> {"\[Nu]", "\[Sigma]", "\[Rho]"}, 
    "Dimensions" -> 3, "IndexPosition" -> {-1, -1, 1}, "SymmetryMarker" -> 
    Association[-1 -> {}, 1 -> {}], "Value" -> 
    SparseArray[
     Automatic, {4, 4, 4}, 0, {
      1, {{0, 16, 32, 48, 64}, {{1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 
        2}, {2, 3}, {2, 4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {
        4, 3}, {4, 4}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 
        3}, {2, 4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {
        4, 4}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {2, 
        4}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 4}, {
        1, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {3, 
        1}, {3, 2}, {3, 3}, {3, 4}, {4, 1}, {4, 2}, {4, 3}, {4, 4}}}, {-
        Dt[$CellContext`at, {EinsteinSummation`t, 2}, 
          Constants -> {
           EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
        Dt[$CellContext`ax, {EinsteinSummation`t, 2}, 
         Constants -> {
          EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
        Dt[$CellContext`ay, {EinsteinSummation`t, 2}, 
         Constants -> {
          EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
        Dt[$CellContext`az, {EinsteinSummation`t, 2}, 
         Constants -> {
          EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`t, 
             Constants -> {
              EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
          EinsteinSummation`t, 
          Constants -> {
           EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`t, 
             Constants -> {
              EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
          EinsteinSummation`t, 
          Constants -> {
           EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`t, 
             Constants -> {
              EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
          EinsteinSummation`t, 
          Constants -> {
           EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`t, 
             Constants -> {
              EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
          EinsteinSummation`t, 
          Constants -> {
           EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, 
             EinsteinSummation`z}]), -
        Dt[$CellContext`at, {EinsteinSummation`x, 2}, 
          Constants -> {
           EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
        Dt[$CellContext`ax, {EinsteinSummation`x, 2}, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
        Dt[$CellContext`ay, {EinsteinSummation`x, 2}, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
        Dt[$CellContext`az, {EinsteinSummation`x, 2}, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`x, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
          EinsteinSummation`x, 
          Constants -> {
           EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`x, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
          EinsteinSummation`x, 
          Constants -> {
           EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`t, 
             Constants -> {
              EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
          EinsteinSummation`t, 
          Constants -> {
           EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`x, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
          EinsteinSummation`x, 
          Constants -> {
           EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, 
             EinsteinSummation`z}]), -
        Dt[$CellContext`at, {EinsteinSummation`y, 2}, 
          Constants -> {
           EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
        Dt[$CellContext`ax, {EinsteinSummation`y, 2}, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
        Dt[$CellContext`ay, {EinsteinSummation`y, 2}, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
        Dt[$CellContext`az, {EinsteinSummation`y, 2}, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`y, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}],
             EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
          EinsteinSummation`y, 
          Constants -> {
           EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}]), 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`t, 
             Constants -> {
              EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
          EinsteinSummation`t, 
          Constants -> {
           EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`t, 
           Constants -> {
            EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`x, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}],
             EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
          EinsteinSummation`x, 
          Constants -> {
           EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`x, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}]), 
        Rational[
         1, 2] (-Dt[
           Dt[$CellContext`at, EinsteinSummation`y, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}],
             EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] - 
         Dt[Dt[$CellContext`at, EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
          EinsteinSummation`y, 
          Constants -> {
           EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ax, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ax, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`ay, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`ay, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}]), 
        Rational[1, 2] (
         Dt[Dt[$CellContext`az, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           EinsteinSummation`z, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}] + 
         Dt[Dt[$CellContext`az, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           EinsteinSummation`y, 
           Constants -> {
            EinsteinSummation`t, EinsteinSummation`x, 
             EinsteinSummation`z}]), -
        Dt[$CellContext`at, {EinsteinSummation`z, 2}, 
          Constants -> {
           EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
        Dt[$CellContext`ax, {EinsteinSummation`z, 2}, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
        Dt[$CellContext`ay, {EinsteinSummation`z, 2}, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
        Dt[$CellContext`az, {EinsteinSummation`z, 2}, 
         Constants -> {
          EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}]}}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellContext->"Notebook$$32$421021`",
 CellLabel->"Out[7]=",
 CellID->10518887,ExpressionUUID->"ead750bd-259d-4d27-9e3e-5ffecfbf2145"]
}, Open  ]]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "0"}]]]],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData[{"Scope", "\[NonBreakingSpace]\[NonBreakingSpace]", 
      Cell["(2)", "ExampleCount"]}]], 0, {
   TaggingRules, "Openers", "ExampleSection", "1"}, 
   RGBColor[
    Rational[217, 255], 
    Rational[101, 255], 0]},
  "SectionOpener"]], "ExampleSection", "ExampleSection",
 WholeCellGroupOpener->True,
 CellID->90364213,ExpressionUUID->"d9615bfe-b8cd-4d91-9859-5ba33f5ae9b0"],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData[{"Input", "\[NonBreakingSpace]\[NonBreakingSpace]", 
      Cell["(1)", "ExampleCount"]}]], 0, {
   TaggingRules, "Openers", "ExampleSubsection", "0"}, 
   RGBColor[
    Rational[217, 255], 
    Rational[101, 255], 0]},
  "SectionOpener"]], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->428987191,ExpressionUUID->"5ae5a911-43a5-4067-b513-a0d421e1da9d"],

Cell["Add a tensor with value directly:", "ExampleText",
 CellID->313741571,ExpressionUUID->"29a51d8b-69bf-4f09-8d29-e79217fae9d9"],

Cell[BoxData[
 RowBox[{"AddTensorToDataset", "[", 
  InterpretationBox[
   RowBox[{
    TagBox["$tensorSymb",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquarePlusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             StyleBox[
              PaneBox[
               TemplateBox[{
                 TemplateBox[{
                   StyleBox["\"A\"", Bold, 24., StripOnInput -> False]}, 
                  "Row", DisplayFunction -> (
                   PaneBox[#, BaselinePosition -> Center]& ), 
                  InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                 TagBox[
                  
                  GridBox[{{"\"\[Mu]\""}, {"\"\""}}, 
                   GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                   False, GridBoxFrame -> {"Columns" -> None, "Rows" -> None},
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                   Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                  RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                  Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
               ImageSize -> {
                 UpTo[139], 38.57142857142857}, ImageSizeAction -> 
               "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                 UpTo[174], 38.57142857142857}], 
              LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
              False], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"A\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquareMinusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             StyleBox[
              PaneBox[
               TemplateBox[{
                 TemplateBox[{
                   StyleBox["\"A\"", Bold, 24., StripOnInput -> False]}, 
                  "Row", 
                  DisplayFunction -> (
                   PaneBox[#, BaselinePosition -> Center]& ), 
                  InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"BaselinePosition", "\[Rule]", "Center"}]}], 
                    "]"}]& )], 
                 TagBox[
                  
                  GridBox[{{"\"\[Mu]\""}, {"\"\""}}, 
                   GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                   False, GridBoxFrame -> {"Columns" -> None, "Rows" -> None},
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{0}}, 
                    "Rows" -> {0, {1.157142857142857}, 0}}, BaselinePosition -> 
                   Center], "Grid"]}, "Row", DisplayFunction -> (PaneBox[
                  RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                  Center]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Center"}]}], "]"}]& )], 
               ImageSize -> {
                 UpTo[139], 38.57142857142857}, ImageSizeAction -> 
               "ResizeToFit", Alignment -> {Center, Top}, ImageSize -> {
                 UpTo[174], 38.57142857142857}], 
              LinebreakAdjustments -> {1000, 2, 12, 1, 1}, StripOnInput -> 
              False], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Symbol: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"A\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Index Name: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", "\"\[Mu]\"", "}"}], ",", "0.4`"}], "]"}], 
                   "SummaryItem"]}], "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Index Position: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", "0.4`"}], "]"}], 
                   "SummaryItem"]}], "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Symmetry Marker: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"Short", "[", 
                    RowBox[{
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "\[Rule]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{"1", "\[Rule]", 
                    RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}], ",", 
                    "0.4`"}], "]"}], "SummaryItem"]}], "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Value: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"\"", "SummaryItem"]}], "\[SpanFromLeft]"}, {
                TagBox[
                 RowBox[{"Short", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"at", ",", "ax", ",", "ay", ",", "az"}], "}"}], 
                    ",", "0.8`"}], "]"}], "SummaryItem"], "\[SpanFromLeft]"}},
               GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   EinsteinSummation`$tensorSymb[
    Association[
    "Symbol" -> "A", "IndexName" -> {"\[Mu]"}, "Dimensions" -> 1, 
     "IndexPosition" -> {1}, "SymmetryMarker" -> 
     Association[-1 -> {}, 1 -> {}], 
     "Value" -> {$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}]],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "]"}]], "Input",
 InitializationCell->False,
 CellLabel->"In[8]:=",
 CellID->329435916,ExpressionUUID->"a4c36b38-d1ab-4e47-b34f-eb9fdc6b5ad4"],

Cell["Add a tensor in string form:", "ExampleText",
 CellID->240332869,ExpressionUUID->"a2b2eb47-91e7-48a3-8924-fe838460da4a"],

Cell[BoxData[
 RowBox[{"AddTensorToDataset", "[", 
  RowBox[{"\"\<\!\(\*SubscriptBox[\(A\), \(\[Mu]\)]\)\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"at", ",", "ax", ",", "ay", ",", "az"}], "}"}]}], "]"}]], "Input",
 InitializationCell->False,
 CellLabel->"In[9]:=",
 CellID->63762870,ExpressionUUID->"369168c2-e0c4-4515-a0dc-c64d5cd3fb7b"],

Cell[TextData[{
 "Add a tensor in ",
 Cell[BoxData[
  TemplateBox[{"Association", "paclet:ref/Association"},
   "RefLink",
   BaseStyle->{}]], "InlineFormula", "InlineFormula",ExpressionUUID->
  "98e27f05-96ed-4366-9d14-ef76d62a65c4"],
 " form:"
}], "ExampleText",
 CellID->82671892,ExpressionUUID->"469edfc3-4816-418f-865a-41295273f886"],

Cell[BoxData[
 RowBox[{"AddTensorToDataset", "[", "\[IndentingNewLine]", 
  RowBox[{"\[LeftAssociation]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"\"\<Symbol\>\"", "\[Rule]", "\"\<A\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<IndexName\>\"", "\[Rule]", 
     RowBox[{"{", "\"\<\[Mu]\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Dimensions\>\"", "\[Rule]", "1"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<IndexPosition\>\"", "\[Rule]", 
     RowBox[{"{", "1", "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<SymmetryMarker\>\"", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "1"}], "\[Rule]", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"{", "}"}]}]}], "\[RightAssociation]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Value\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"at", ",", "ax", ",", "ay", ",", "az"}], "}"}]}]}], 
   "\[IndentingNewLine]", "\[RightAssociation]"}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 InitializationCell->False,
 CellLabel->"In[10]:=",
 CellID->103396812,ExpressionUUID->"1c85bb13-9e4a-4e73-a36d-bc155eca212b"]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSubsection", "0"}]]]],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{
   Cell[
    TextData[{"Override", "\[NonBreakingSpace]\[NonBreakingSpace]", 
      Cell["(1)", "ExampleCount"]}]], 0, {
   TaggingRules, "Openers", "ExampleSubsection", "1"}, 
   RGBColor[
    Rational[217, 255], 
    Rational[101, 255], 0]},
  "SectionOpener"]], "ExampleSubsection", "ExampleSubsection",
 WholeCellGroupOpener->True,
 CellID->36802823,ExpressionUUID->"feceacc1-5c2a-4a0b-8b5f-652f8426a1e5"],

Cell["Add a tensor:", "ExampleText",
 CellID->788092525,ExpressionUUID->"b3aec71e-ff5e-4dc5-899c-8e797aa2c5ac"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AddTensorToDataset", "[", 
  RowBox[{"\"\<\!\(\*SuperscriptBox[\(A\), \(\[Mu]\)]\)\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"at", ",", "ax", ",", "ay", ",", "az"}], "}"}]}], 
  "]"}], "\n", "$TensorDefinitions"}], "Input",
 InitializationCell->False,
 CellLabel->"In[11]:=",
 CellID->66688289,ExpressionUUID->"4b9bfe95-1e75-4623-9e60-422a0b34af03"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {-1, -1}, 
        "Value" -> SparseArray[
         Automatic, {4, 4}, 0, {
          1, {{0, 1, 2, 3, 4}, {{1}, {2}, {3}, {4}}}, {-1, 1, 1, 1}}]], 
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {1, 1}, 
        "Value" -> {{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}], 
       Association[
       "Symbol" -> "\[CapitalGamma]", "Dimensions" -> 3, 
        "IndexPosition" -> {1, -1, -1}, 
        "Value" -> {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 
         0}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 
         0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {
         0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}], 
       Association[
       "Symbol" -> "T", "Dimensions" -> 2, "IndexPosition" -> {-1, 1}, 
        "Value" -> {{-
           Dt[$CellContext`at, EinsteinSummation`t, 
             Constants -> {
              EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ax, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ay, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`az, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, 
              EinsteinSummation`z}]}, {-
           Dt[$CellContext`at, EinsteinSummation`x, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ax, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ay, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`az, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, 
              EinsteinSummation`z}]}, {-
           Dt[$CellContext`at, EinsteinSummation`y, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           
           Dt[$CellContext`ax, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           
           Dt[$CellContext`ay, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           
           Dt[$CellContext`az, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, 
              EinsteinSummation`z}]}, {-
           Dt[$CellContext`at, EinsteinSummation`z, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           
           Dt[$CellContext`ax, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           
           Dt[$CellContext`ay, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           
           Dt[$CellContext`az, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, 
              EinsteinSummation`y}]}}], 
       Association[
       "Symbol" -> "A", "Dimensions" -> 1, "IndexPosition" -> {1}, 
        "Value" -> {$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}]}, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[28.800000000000004`],
             "Dimensions" -> TypeSystem`PackageScope`AtomShape[34], 
            "IndexPosition" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Value" -> TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 5, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 5], "Meta" -> 
     Association["ID" -> 88742816203316], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[28.800000000000004`],
             "Dimensions" -> TypeSystem`PackageScope`AtomShape[34], 
            "IndexPosition" -> TypeSystem`PackageScope`UnknownShape[False], 
            "Value" -> TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 5, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 5], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 5, "DisplayedColumnCount" -> 4, "DataRowCount" -> 
     5, "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Symbol", 
                    Style[
                    "Symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Symbol"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Symbol"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Dimensions", 
                    Style[
                    "Dimensions", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Dimensions"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Dimensions"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["IndexPosition", 
                    Style[
                    "IndexPosition", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "IndexPosition"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "IndexPosition"}, "ColumnHeader", True], "Mouse"], " ",
                 ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Value", 
                    Style[
                    "Value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Value"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Value"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1, -1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 
                   1}}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0,
                     1}}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["\[CapitalGamma]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, -1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, -1, -1}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation["T", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation["A", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{28.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{554., {101.42857142857143`, 106.57142857142857`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{554., {101.42857142857143`, 106.57142857142857`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellContext->"Notebook$$32$421021`",
 CellLabel->"Out[12]=",
 CellID->221406167,ExpressionUUID->"bbf831fa-52b3-4b10-829b-86db6cad374a"]
}, Open  ]],

Cell["\<\
Add another tensor with same name but with different dimension will not \
override previous definitions:\
\>", "ExampleText",
 CellID->89729564,ExpressionUUID->"cfbfd396-40bd-479b-8b03-1b7597b8cc29"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AddTensorToDataset", "[", 
  RowBox[{"\"\<\!\(\*SuperscriptBox[\(A\), \(\[Mu]\[Nu]\)]\)\>\"", ",", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"0", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "4"}], "}"}]}], "]"}]}], 
  "]"}], "\n", "$TensorDefinitions"}], "Input",
 InitializationCell->False,
 CellLabel->"In[15]:=",
 CellID->534731683,ExpressionUUID->"c718ae70-2165-45d2-89b3-e64ddd5aac59"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {-1, -1}, 
        "Value" -> SparseArray[
         Automatic, {4, 4}, 0, {
          1, {{0, 1, 2, 3, 4}, {{1}, {2}, {3}, {4}}}, {-1, 1, 1, 1}}]], 
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {1, 1}, 
        "Value" -> {{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}], 
       Association[
       "Symbol" -> "\[CapitalGamma]", "Dimensions" -> 3, 
        "IndexPosition" -> {1, -1, -1}, 
        "Value" -> {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 
         0}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 
         0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {
         0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}], 
       Association[
       "Symbol" -> "T", "Dimensions" -> 2, "IndexPosition" -> {-1, 1}, 
        "Value" -> {{-
           Dt[$CellContext`at, EinsteinSummation`t, 
             Constants -> {
              EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ax, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ay, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`az, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, 
              EinsteinSummation`z}]}, {-
           Dt[$CellContext`at, EinsteinSummation`x, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ax, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ay, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`az, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, 
              EinsteinSummation`z}]}, {-
           Dt[$CellContext`at, EinsteinSummation`y, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           
           Dt[$CellContext`ax, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           
           Dt[$CellContext`ay, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           
           Dt[$CellContext`az, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, 
              EinsteinSummation`z}]}, {-
           Dt[$CellContext`at, EinsteinSummation`z, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           
           Dt[$CellContext`ax, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           
           Dt[$CellContext`ay, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           
           Dt[$CellContext`az, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, 
              EinsteinSummation`y}]}}], 
       Association[
       "Symbol" -> "A", "Dimensions" -> 1, "IndexPosition" -> {1}, 
        "Value" -> {$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}], 
       Association[
       "Symbol" -> "A", "Dimensions" -> 2, "IndexPosition" -> {1, 1}, 
        "Value" -> {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}]},
      "InitialShape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[27.], "Dimensions" -> 
            TypeSystem`PackageScope`AtomShape[34], "IndexPosition" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Value" -> 
            TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 6, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["A", "g", "T", "\[CapitalGamma]"]], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 6], "Meta" -> 
     Association["ID" -> 88751406137917], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[27.], "Dimensions" -> 
            TypeSystem`PackageScope`AtomShape[34], "IndexPosition" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Value" -> 
            TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 6, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["A", "g", "T", "\[CapitalGamma]"]], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 6], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 6, "DisplayedColumnCount" -> 4, "DataRowCount" -> 
     6, "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Symbol", 
                    Style[
                    "Symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Symbol"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Symbol"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Dimensions", 
                    Style[
                    "Dimensions", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Dimensions"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Dimensions"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["IndexPosition", 
                    Style[
                    "IndexPosition", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "IndexPosition"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "IndexPosition"}, "ColumnHeader", True], "Mouse"], " ",
                 ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Value", 
                    Style[
                    "Value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Value"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Value"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1, -1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 
                   1}}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0,
                     1}}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["\[CapitalGamma]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, -1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, -1, -1}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation["T", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation["A", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{$CellContext`at, $CellContext`ax, $CellContext`ay, \
$CellContext`az}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["A", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 
                   0}}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 
                    0}}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{554., {113.42857142857143`, 118.57142857142857`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{554., {113.42857142857143`, 118.57142857142857`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellContext->"Notebook$$32$421021`",
 CellLabel->"Out[16]=",
 CellID->141529271,ExpressionUUID->"e8422be3-3fac-4869-921e-b2d7df0a7dec"]
}, Open  ]],

Cell["\<\
Add another tensor with same name and same dimension will override previous \
definitions even if the position of indexes are different:\
\>", "ExampleText",
 CellID->30338671,ExpressionUUID->"45bfd5c3-3ff5-4fe4-8fa9-224379a963d0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AddTensorToDataset", "[", 
  RowBox[{"\"\<\!\(\*SubscriptBox[\(A\), \(\[Nu]\)]\)\>\"", ",", 
   RowBox[{"{", 
    RowBox[{"at1", ",", "ax1", ",", "ay1", ",", "az1"}], "}"}]}], 
  "]"}], "\n", "$TensorDefinitions"}], "Input",
 InitializationCell->False,
 CellLabel->"In[17]:=",
 CellID->852382326,ExpressionUUID->"accd7faa-5ead-48e4-90fa-37e2de5c38b2"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association["InitialData" -> {
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {-1, -1}, 
        "Value" -> SparseArray[
         Automatic, {4, 4}, 0, {
          1, {{0, 1, 2, 3, 4}, {{1}, {2}, {3}, {4}}}, {-1, 1, 1, 1}}]], 
       Association[
       "Symbol" -> "g", "Dimensions" -> 2, "IndexPosition" -> {1, 1}, 
        "Value" -> {{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 1}}], 
       Association[
       "Symbol" -> "\[CapitalGamma]", "Dimensions" -> 3, 
        "IndexPosition" -> {1, -1, -1}, 
        "Value" -> {{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 
         0}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 
         0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, {{0, 0, 0, 0}, {
         0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}], 
       Association[
       "Symbol" -> "T", "Dimensions" -> 2, "IndexPosition" -> {-1, 1}, 
        "Value" -> {{-
           Dt[$CellContext`at, EinsteinSummation`t, 
             Constants -> {
              EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ax, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ay, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`az, EinsteinSummation`t, 
            Constants -> {
             EinsteinSummation`x, EinsteinSummation`y, 
              EinsteinSummation`z}]}, {-
           Dt[$CellContext`at, EinsteinSummation`x, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ax, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`ay, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, EinsteinSummation`z}], 
           
           Dt[$CellContext`az, EinsteinSummation`x, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`y, 
              EinsteinSummation`z}]}, {-
           Dt[$CellContext`at, EinsteinSummation`y, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           
           Dt[$CellContext`ax, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           
           Dt[$CellContext`ay, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`z}], 
           
           Dt[$CellContext`az, EinsteinSummation`y, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, 
              EinsteinSummation`z}]}, {-
           Dt[$CellContext`at, EinsteinSummation`z, 
             Constants -> {
              EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           
           Dt[$CellContext`ax, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           
           Dt[$CellContext`ay, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, EinsteinSummation`y}], 
           
           Dt[$CellContext`az, EinsteinSummation`z, 
            Constants -> {
             EinsteinSummation`t, EinsteinSummation`x, 
              EinsteinSummation`y}]}}], 
       Association[
       "Symbol" -> "A", "Dimensions" -> 2, "IndexPosition" -> {1, 1}, 
        "Value" -> {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}], 
       Association[
       "Symbol" -> "A", "Dimensions" -> 1, "IndexPosition" -> {-1}, 
        "Value" -> {$CellContext`at1, $CellContext`ax1, $CellContext`ay1, \
$CellContext`az1}]}, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[27.], "Dimensions" -> 
            TypeSystem`PackageScope`AtomShape[34], "IndexPosition" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Value" -> 
            TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 6, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["A", "g", "T", "\[CapitalGamma]"]], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 6], "Meta" -> 
     Association["ID" -> 88759996072511], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, "Symbol"} -> 1, {All, "Dimensions"} -> 
        1, {All, "IndexPosition"} -> 1, {All, "Value"} -> 1], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`RowShape[
           Association[
           "Symbol" -> TypeSystem`PackageScope`AtomShape[27.], "Dimensions" -> 
            TypeSystem`PackageScope`AtomShape[34], "IndexPosition" -> 
            TypeSystem`PackageScope`UnknownShape[False], "Value" -> 
            TypeSystem`PackageScope`UnknownShape[False]]], 
          DirectedInfinity[1], 4, {All}]], 6, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"Symbol", "Dimensions", "IndexPosition", "Value"}, {
         TypeSystem`Atom[
          TypeSystem`Enumeration["A", "g", "T", "\[CapitalGamma]"]], 
         TypeSystem`Atom[Integer], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength], 
         TypeSystem`AnyType}], 6], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 6, "DisplayedColumnCount" -> 4, "DataRowCount" -> 
     6, "DataColumnCount" -> 4, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Symbol", 
                    Style[
                    "Symbol", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Symbol"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Symbol"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Dimensions", 
                    Style[
                    "Dimensions", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Dimensions"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Dimensions"}, "ColumnHeader", True], "Mouse"], " ", 
                ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["IndexPosition", 
                    Style[
                    "IndexPosition", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "IndexPosition"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "IndexPosition"}, "ColumnHeader", True], "Mouse"], " ",
                 ""}], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Row[{
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["Value", 
                    Style[
                    "Value", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                   TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "Value"}, 1]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "Value"}, "ColumnHeader", True], "Mouse"], " ", ""}], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1, -1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   TagBox["SparseArray", "SummaryHead"], "[", 
                   TemplateBox[{
                    GridBox[{{
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["4", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, "SummaryPanel"], "]"}], 
                 FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                 True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["g", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0, 
                   1}}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{{-1, 0, 0, 0}, {0, 1, 0, 0}, {0, 0, 1, 0}, {0, 0, 0,
                     1}}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["\[CapitalGamma]", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, -1, -1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, -1, -1}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{3, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation["T", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], 
                  Style[
                   Row[{"  { ", 
                    Subscript["\[Ellipsis]", 4], " }  "}], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{4, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}, {
            Item[
             Pane[
              Annotation["A", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 
                   0}}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 
                    0}}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{5, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{5, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation["A", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Symbol"]}, "Item", False], "Mouse"], 
              ImageSize -> {{27., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Dimensions"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{-1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{-1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                   Key["IndexPosition"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["IndexPosition"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{$CellContext`at1, $CellContext`ax1, \
$CellContext`ay1, $CellContext`az1}, ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{$CellContext`at1, $CellContext`ax1, \
$CellContext`ay1, $CellContext`az1}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                TypeSystem`NestedGrid`PackagePrivate`updateState[
                 TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                  TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{6, 
                   Key["Value"]}, 4]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{6, 
                 Key["Value"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    ToString[
                    ReplaceAll[
                    Last[TypeSystem`NestedGrid`PackagePrivate`lastPath$], Key[
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`x, 
                    Blank[]]] :> TypeSystem`NestedGrid`PackagePrivate`x]], 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       1, "Path" -> TypeSystem`NestedGrid`PackagePrivate`$path$$, "Grid" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        TypeSystem`NestedGrid`PackagePrivate`$state$$, "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`$topBar$$, "BottomBar" -> 
        TypeSystem`NestedGrid`PackagePrivate`releaseLocalHold[
         TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$]], StandardForm],
      ImageSizeCache->{554., {113.42857142857143`, 118.57142857142857`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{554., {113.42857142857143`, 118.57142857142857`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellContext->"Notebook$$32$421021`",
 CellLabel->"Out[18]=",
 CellID->107631792,ExpressionUUID->"8547df92-9d69-429e-9549-60100ca5aa6e"]
}, Open  ]]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSubsection", "1"}]]]]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "1"}]]]],

Cell["", "SectionFooterSpacer",
 CellID->207522610,ExpressionUUID->"8728e74c-9bed-4cd7-b83a-b8f27984ee44"]
}, Dynamic[CurrentValue[
 EvaluationNotebook[], {
  TaggingRules, "Openers", "PrimaryExamplesSection", "0"}]]]],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{"See Also"},
  "LinkSectionHeader"]], "SeeAlsoSection", "SeeAlsoSection", \
"LinkSectionHeader",
 CellID->261298214,ExpressionUUID->"df681c09-a2a5-405d-8c92-ec0dc694a6fc"],

Cell[BoxData[
 TemplateBox[{"RelatedFunction.png", "See Also", 
   GridBox[{{
      Cell[
       TextData[{
         Cell[
          BoxData[
           
           TemplateBox[{
            "$TensorDefinitions", 
             "paclet:EinsteinSummation/ReferencePages/Symbols/$\
TensorDefinitions"}, "RefLink", BaseStyle -> {"SeeAlsoItem"}]], 
          "InlineFormula", "InlineFormula"], "\[NonBreakingSpace]", 
         StyleBox[
         "\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
          "InlineSeparator"], " ", 
         Cell[
          BoxData[
           
           TemplateBox[{
            "EvaluateEinsteinSummation", 
             "paclet:EinsteinSummation/ReferencePages/Symbols/\
EvaluateEinsteinSummation"}, "RefLink", BaseStyle -> {"SeeAlsoItem"}]], 
          "InlineFormula", "InlineFormula"], "\[NonBreakingSpace]", 
         StyleBox[
         "\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", 
          "InlineSeparator"], " ", 
         Cell[
          BoxData[
           
           TemplateBox[{
            "ParseTensor", 
             "paclet:EinsteinSummation/ReferencePages/Symbols/ParseTensor"}, 
            "RefLink", BaseStyle -> {"SeeAlsoItem"}]], "InlineFormula", 
          "InlineFormula"]}], "SeeAlso"]}}]},
  "LinkSectionContent"]], "SeeAlsoSection", "SeeAlsoSection", \
"LinkSectionContent",
 CellID->95190560,ExpressionUUID->"1af05827-4575-4462-866d-41000366f522"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{"Tutorials"},
  "LinkSectionHeader"]], "TutorialsSection", "TutorialsSection", \
"LinkSectionHeader",
 CellID->265959201,ExpressionUUID->"78b91f78-136e-411b-a9a8-6f89b638c60e"],

Cell["", "SectionHeaderSpacer",
 CellID->7516922,ExpressionUUID->"40e71dc0-3523-4ff0-a5d0-8c2938151533"],

Cell[BoxData[
 TemplateBox[{"RelatedTutorial.png", "Tutorials", 
   GridBox[{{
      RowBox[{"\[FilledVerySmallSquare]", 
        Cell[
         BoxData[
          
          TemplateBox[{
           "Einstein Summation", 
            "paclet:EinsteinSummation/ReferencePages/Tutorials/\
EinsteinSummation"}, "RefLinkPlain", BaseStyle -> {"Tutorials"}]], 
         "Tutorials"]}]}}]},
  "LinkSectionContent"]], "TutorialsSection", "TutorialsSection", \
"LinkSectionContent", "SpacerMargins",
 CellID->61818105,ExpressionUUID->"b435c7f3-ad1d-48ef-a078-0c871baf3b1f"],

Cell["", "SectionFooterSpacer",
 CellID->54139818,ExpressionUUID->"a867ba68-fee9-4742-8752-03decff9eeef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 TemplateBox[{"Related Guides"},
  "LinkSectionHeader"]], "MoreAboutSection", "MoreAboutSection", \
"LinkSectionHeader",
 CellID->17211881,ExpressionUUID->"2ffe8a31-ff2c-45c5-ad4c-cbef387265ad"],

Cell["", "SectionHeaderSpacer",
 CellID->111813277,ExpressionUUID->"91bf5ba6-8bec-42fa-b4b9-52b768f29c22"],

Cell[BoxData[
 TemplateBox[{"RelatedGuide.png", "Related Guides", 
   GridBox[{{
      RowBox[{"\[FilledVerySmallSquare]", 
        Cell[
         BoxData[
          
          TemplateBox[{
           "Tensor Expressions with Einstein Summation", 
            "paclet:EinsteinSummation/ReferencePages/Guides/\
TensorExpressionswithEinsteinSummation"}, "RefLinkPlain", 
           BaseStyle -> {"MoreAbout"}]], "MoreAbout"]}]}}]},
  "LinkSectionContent"]], "MoreAboutSection", "MoreAboutSection", \
"LinkSectionContent", "SpacerMargins",
 CellID->233444222,ExpressionUUID->"28980e25-248e-4cb6-af7b-1d1a16ab5122"],

Cell["", "SectionFooterSpacer",
 CellID->271595882,ExpressionUUID->"79c3b801-bbdb-4fce-a515-3f467e362e76"]
}, Open  ]],

Cell[TextData[{
 "Introduced in ",
 Cell["0.1.0", "HistoryVersion",ExpressionUUID->
  "b002c3e1-bf72-4981-86cb-70fc2f197bca"],
 " | Updated in ",
 Cell["0.3.0", "HistoryVersion",ExpressionUUID->
  "ef29c703-fbda-4583-97e7-d13cf010434e"]
}], "History",
 CellID->9993063,ExpressionUUID->"0f4762b8-f17d-435a-bc07-3e9c11a3153d"]
},
Saveable->False,
WindowSize->{584.1428571428571, 655.2857142857142},
WindowMargins->{{288.85714285714283`, Automatic}, {Automatic, 42}},
WindowTitle->"AddTensorToDataset",
Visible->True,
TaggingRules->{
 "NewStyles" -> True, 
  "Metadata" -> {
   "title" -> "AddTensorToDataset", "description" -> "", "label" -> " Symbol",
     "context" -> "EinsteinSummation`", "index" -> True, "language" -> "en", 
    "paclet" -> "", "type" -> "Symbol", "windowtitle" -> "AddTensorToDataset",
     "uri" -> "EinsteinSummation/ReferencePages/Symbols/AddTensorToDataset", 
    "summary" -> 
    "AddTensorToDataset[tensor] adds tensor to $TensorDefinitions for further \
computation. AddTensorToDataset[tensor,value] sets tensor's value as value. \
AddTensorToDataset[str,value] parse str as a tensor object using ParseTensor \
and set its value as value. AddTensorToDataset[str,tensor] sets up the value \
of tensor named as str as value of tensor. AddTensorToDataset[asso,\
\[CenterEllipsis]] sets up the value of tensor corresponding to Association \
asso.", "keywords" -> {}, "WorkflowDockedCell" -> ""}, "LinkTrails" -> "", 
  "SearchTextTranslated" -> "", 
  "Openers" -> {
   "NotesSection" -> {"0" -> False}, 
    "ExampleSubsection" -> {"0" -> Closed, "1" -> Closed}, 
    "ExampleSection" -> {"0" -> True, "1" -> Closed}, 
    "PrimaryExamplesSection" -> {"0" -> True}}},
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (2020\:5e744\:670830\
\:65e5)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"Wolfram"}, "Reference.nb", CharacterEncoding -> 
       "UTF-8"]]], 
   Cell[
    StyleData["Spacer1"], TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        GraphicsBox[{}, ImageSize -> {#, 0}, 
         BaselinePosition -> (Scaled[0] -> Baseline)], CacheGraphics -> 
        False]& ), InterpretationFunction -> (InterpretationBox["", 
        Spacer[#]]& ), Tooltip -> None}], 
   Cell[
    StyleData["Spacer2"], TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        GraphicsBox[{}, ImageSize -> {#, #2}, 
         BaselinePosition -> (Scaled[0] -> Baseline)], CacheGraphics -> 
        False]& ), InterpretationFunction -> (InterpretationBox["", 
        Spacer[{#, #2}]]& ), Tooltip -> None}], 
   Cell[
    StyleData["RefLinkPlain", StyleDefinitions -> StyleData["RefLink"]]], 
   Cell[
    StyleData["OrangeLink"], TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        ButtonBox[
         StyleBox[#, FontColor -> Dynamic[
            If[
             CurrentValue["MouseOver"], 
             RGBColor[0.854902, 0.396078, 0.145098], Inherited]]], 
         ButtonData -> #2], 
        MouseAppearanceTag["LinkHand"]]& )}, 
    ButtonBoxOptions -> {BaseStyle -> {"Link", "GuideFunctionsSubsection"}}], 
   Cell[
    StyleData["WebLink"], AutoSpacing -> False], 
   Cell[
    StyleData["SectionOpener"], ShowGroupOpener -> False, 
    TemplateBoxOptions -> {DisplayFunction -> (Cell[
        TextData[{
          Cell[
           BoxData[
            RotationBox[
             StyleBox[
              GraphicsBox[{
                Thickness[0.18], #4, 
                LineBox[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1,
                PlotRange -> {{-3, 4}, {-1, 1}}, ImageSize -> 20], 
              Magnification -> Dynamic[0.68 CurrentValue[Magnification]], 
              StripOnInput -> False], BoxRotation -> FEPrivate`Switch[
               FrontEnd`CurrentValue[
                FrontEnd`EvaluationNotebook[], #3], True, 0, Open, 0, 
               Blank[], Rational[1, 2] Pi], 
             BoxRotationPoint -> {-1.65, -1}]]], 
          Cell[
           BoxData[
            TemplateBox[{1}, "Spacer1"]]], #}]]& )}], 
   Cell[
    StyleData["LinkSectionHeader"], CellFrame -> {{False, False}, {False, 
       FEPrivate`Less[FEPrivate`$VersionNumber, 12.]}}, WholeCellGroupOpener -> 
    False, CellMargins -> FEPrivate`If[
      FEPrivate`Less[FEPrivate`$VersionNumber, 11.1], 0, 
      FEPrivate`If[
       FEPrivate`Less[FEPrivate`$VersionNumber, 12.], {{24, 22}, {8, 
       28}}, -2]], CellElementSpacings -> {"CellMinHeight" -> FEPrivate`If[
        FEPrivate`Less[FEPrivate`$VersionNumber, 12.], Inherited, 0], 
      "ClosedCellHeight" -> FEPrivate`If[
        FEPrivate`Less[FEPrivate`$VersionNumber, 12.], Inherited, 0]}, 
    CellOpen -> FEPrivate`Less[FEPrivate`$VersionNumber, 12.], 
    TemplateBoxOptions -> {DisplayFunction -> (#& )}], 
   Cell[
    StyleData["SpacerMargins"], CellMargins -> FEPrivate`If[
      FEPrivate`Less[FEPrivate`$VersionNumber, 11.1], {{29, 24}, {1, 1}}, 
      FEPrivate`If[
       FEPrivate`Less[FEPrivate`$VersionNumber, 12.], {{36, 24}, {0, 2}}, {{
       24, 22}, {7, 28}}]]], 
   Cell[
    StyleData["LinkSectionContent"], CellFrame -> {{False, False}, {False, 
       FEPrivate`If[
        FEPrivate`Less[FEPrivate`$VersionNumber, 12.], False, True]}}, 
    CellMargins -> FEPrivate`If[
      FEPrivate`Less[FEPrivate`$VersionNumber, 11.1], {{28, 24}, {25, 14}}, 
      FEPrivate`If[
       FEPrivate`Less[FEPrivate`$VersionNumber, 12.], {{37, 24}, {0, 2}}, {{
       24, 22}, {7, 28}}]], CellGroupingRules -> "NormalGrouping", FontSize -> 
    16, FontWeight -> "Normal", FontColor -> GrayLevel[0.545098], Background -> 
    None, TemplateBoxOptions -> {DisplayFunction -> FEPrivate`If[
        FEPrivate`Less[FEPrivate`$VersionNumber, 12.], #3& , GridBox[{{
           DynamicBox[
            FEPrivate`ImportImage[
             FrontEnd`FileName[{"Documentation", "FooterIcons"}, #]]], 
           
           GridBox[{{#2}, {#3}}, BaseStyle -> {CellFrame -> 0}, 
            GridBoxSpacings -> {"Rows" -> {0, 0.7}}]}}, 
         GridBoxSpacings -> {"Columns" -> {{0.9}}}]& ]}, 
    GridBoxOptions -> {
     GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
      GridBoxSpacings -> {"Rows" -> {0, {
           FEPrivate`If[
            FEPrivate`Less[FEPrivate`$VersionNumber, 12.], 0.3, 0.2]}}}}], 
   Cell[
    StyleData["SectionHeaderSpacer"], CellMargins -> -2, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    CellOpen -> False], 
   Cell[
    StyleData["SectionFooterSpacer"], CellMargins -> -2, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    CellOpen -> False], 
   Cell[
    StyleData["PacletName"], 
    TemplateBoxOptions -> {DisplayFunction -> (GridBox[{{
          ItemBox[
           Cell[
            BoxData[
             RowBox[{
               TemplateBox[{8}, "Spacer1"], 
               Cell[#, "PacletNameCell", TextAlignment -> Center], 
               TemplateBox[{8}, "Spacer1"]}]], TextAlignment -> Center], 
           Background -> #2, ItemSize -> Full], ""}}, 
        GridBoxAlignment -> {"Rows" -> {{Center}}}, 
        GridBoxItemSize -> {"Columns" -> {Full, 
            Scaled[0.02]}, "Rows" -> {{2.5}}}]& )}], 
   Cell[
    StyleData["HeaderMenuArrow"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         GrayLevel[2/3], 
         Thickness[0.13], 
         LineBox[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]}, AspectRatio -> 1, 
        ImageSize -> 20, PlotRange -> {{-3, 4}, {-1, 1}}]& )}], 
   Cell[
    StyleData["ContextNameCell"], Editable -> False, ShowCellBracket -> False,
     CellMargins -> {{24, 22}, {0, 0}}, FontFamily -> "Source Sans Pro", 
    FontSize -> 18, FontWeight -> "Bold", FontColor -> GrayLevel[
      Rational[44, 85]]], 
   Cell[
    StyleData["Input"], CellContext -> Notebook], 
   Cell[
    StyleData["UnevaluatedInput", StyleDefinitions -> StyleData["Input"]]], 
   Cell[
    StyleData["Output"], CellContext -> Notebook], 
   Cell[
    StyleData["NotesThumbnails"], ShowCellBracket -> False, 
    CellMargins -> {{32, Inherited}, {0, 0}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    CellOpen -> FEPrivate`Switch[
      FrontEnd`CurrentValue[
       FrontEnd`EvaluationNotebook[], {
       TaggingRules, "Openers", "NotesSection", "0"}], True, False, Open, 
      False, 
      Blank[], True]], 
   Cell[
    StyleData["DetailsHeader"], 
    TemplateBoxOptions -> {DisplayFunction -> ("Details and Options"& )}], 
   Cell[
    StyleData[
    "ExampleSectionDelimiter", StyleDefinitions -> 
     StyleData["PageDelimiter"]], CellMargins -> FEPrivate`If[
      FEPrivate`Less[FEPrivate`$VersionNumber, 12.], -2, {{24, 14}, {12, 
      12}}], CellOpen -> FEPrivate`If[
      FEPrivate`Less[FEPrivate`$VersionNumber, 12.], False, True]], 
   Cell[
    StyleData["SeeAlsoItem", StyleDefinitions -> "InlineFormula"], FontFamily -> 
    "Source Sans Pro"]}, Visible -> False, FrontEndVersion -> 
  "12.1 for Microsoft Windows (64-bit) (2020\:5e744\:670830\:65e5)", 
  StyleDefinitions -> "Default.nb"],
ExpressionUUID->"42ab5d65-a86b-4e3f-bf3a-80e0b4ceacb3"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[590, 21, 3180, 80, 88, "AnchorBarGrid",ExpressionUUID->"87574fe2-9963-418b-aaf8-56d866aee20b",
 CellID->170884626],
Cell[3773, 103, 120, 1, 23, "ContextNameCell",ExpressionUUID->"f090fe43-321c-4128-beae-954c6daaca5e",
 CellID->509163821],
Cell[CellGroupData[{
Cell[3918, 108, 113, 1, 53, "ObjectName",ExpressionUUID->"1e94f433-0e20-4440-9bf1-0ef488e131b5",
 CellID->6842118],
Cell[4034, 111, 5046, 129, 431, "Usage",ExpressionUUID->"9854b96a-8744-459c-a3b2-ee91610e6eb9",
 CellID->521453495]
}, Open  ]],
Cell[CellGroupData[{
Cell[9117, 245, 451, 14, 36, "NotesSection",ExpressionUUID->"82085052-bcbf-447b-9225-b9d64f813b92",
 CellID->112490581],
Cell[9571, 261, 662, 18, 70, "Notes",ExpressionUUID->"7b28aa51-06a0-44f3-8648-746091d94d31",
 CellID->461344949],
Cell[10236, 281, 662, 13, 70, "Notes",ExpressionUUID->"cc76482c-fb70-4d0a-a80b-477b290e4cc4",
 CellID->499068436]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "NotesSection", "0"}]]]],
Cell[11000, 298, 12909, 247, 80, "NotesThumbnails",ExpressionUUID->"dd29cf4b-78d9-4453-975c-2566ce17d9d2",
 CellID->32646656],
Cell[23912, 547, 110, 1, 26, "ExampleSectionDelimiter",ExpressionUUID->"b9f943ec-621a-477a-bb10-4fa03a9870d6",
 CellID->835655171],
Cell[CellGroupData[{
Cell[24047, 552, 454, 11, 37, "PrimaryExamplesSection",ExpressionUUID->"6f90de2a-759e-439d-821b-87ddf9133e0f",
 CellID->147763668],
Cell[CellGroupData[{
Cell[24526, 567, 435, 11, 32, "ExampleSection",ExpressionUUID->"4add4f0d-76a8-40c5-a5ea-317ffa437bff",
 CellID->71310016],
Cell[24964, 580, 133, 1, 38, "ExampleText",ExpressionUUID->"c42b5e47-9e77-4b2a-bb99-835e5a728aaf",
 CellID->128775739],
Cell[CellGroupData[{
Cell[25122, 585, 206, 4, 26, "Input",ExpressionUUID->"720d2411-373c-44d6-be29-5ccdd4d047ff",
 InitializationCell->False,
 CellID->91212369],
Cell[25331, 591, 1037, 27, 52, "Print",ExpressionUUID->"099cc4a1-f9f7-4a3c-925d-a70478073ff7",
 CellID->316135893]
}, Open  ]],
Cell[26383, 621, 440, 11, 59, "ExampleText",ExpressionUUID->"2c25604e-bae1-440b-b528-103345d6a369",
 CellID->562666598],
Cell[CellGroupData[{
Cell[26848, 636, 169, 3, 26, "Input",ExpressionUUID->"13e7fc61-97b9-405f-b09b-cb33d44786b4",
 InitializationCell->False,
 CellID->50765364],
Cell[27020, 641, 41425, 757, 183, "Output",ExpressionUUID->"6b1c32a2-2991-4004-bc00-9fd7f7b934a8",
 CellID->230733877]
}, Open  ]],
Cell[68460, 1401, 664, 19, 40, "ExampleText",ExpressionUUID->"8959df1f-cece-4f70-ac09-b2fd37081031",
 CellID->485329844],
Cell[CellGroupData[{
Cell[69149, 1424, 9675, 200, 113, "Input",ExpressionUUID->"ae0311b3-2528-4e82-ac50-074d9a2e8ea7",
 InitializationCell->False,
 CellID->222847755],
Cell[78827, 1626, 45681, 839, 207, "Output",ExpressionUUID->"db7482b6-d439-4713-8c6e-b2583235695f",
 CellID->380574044]
}, Open  ]],
Cell[124523, 2468, 422, 11, 40, "ExampleText",ExpressionUUID->"1410674b-657d-43fd-baa4-8636d9e4205e",
 CellID->380669673],
Cell[CellGroupData[{
Cell[124970, 2483, 19320, 393, 134, "Input",ExpressionUUID->"45eff8ee-1452-4575-809e-54a178fc5ffa",
 InitializationCell->False,
 CellID->97146153],
Cell[144293, 2878, 11948, 247, 81, "Output",ExpressionUUID->"208fe64c-15de-44c8-bddb-a22f968f8080",
 CellID->517444758]
}, Open  ]],
Cell[156256, 3128, 145, 1, 38, "ExampleText",ExpressionUUID->"718e2a23-f458-4b43-a98a-1d9e3f5e7e86",
 CellID->45602359],
Cell[156404, 3131, 230, 5, 26, "Input",ExpressionUUID->"8af39dca-fb31-461e-9fa3-b6f80f4b9f04",
 InitializationCell->False,
 CellID->985286619],
Cell[156637, 3138, 127, 1, 38, "ExampleText",ExpressionUUID->"6e3f2743-8bc8-41ca-8e01-d845e462fcf2",
 CellID->509327691],
Cell[CellGroupData[{
Cell[156789, 3143, 19532, 401, 134, "Input",ExpressionUUID->"8bc259e6-7e83-46c2-b2b0-9399b83b6909",
 InitializationCell->False,
 CellID->109798159],
Cell[176324, 3546, 95339, 1913, 81, "Output",ExpressionUUID->"ead750bd-259d-4d27-9e3e-5ffecfbf2145",
 CellID->10518887]
}, Open  ]]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "0"}]]]],
Cell[CellGroupData[{
Cell[271801, 5466, 426, 11, 32, "ExampleSection",ExpressionUUID->"d9615bfe-b8cd-4d91-9859-5ba33f5ae9b0",
 CellID->90364213],
Cell[CellGroupData[{
Cell[272252, 5481, 436, 11, 31, "ExampleSubsection",ExpressionUUID->"5ae5a911-43a5-4067-b513-a0d421e1da9d",
 CellID->428987191],
Cell[272691, 5494, 131, 1, 38, "ExampleText",ExpressionUUID->"29a51d8b-69bf-4f09-8d29-e79217fae9d9",
 CellID->313741571],
Cell[272825, 5497, 9903, 205, 72, "Input",ExpressionUUID->"a4c36b38-d1ab-4e47-b34f-eb9fdc6b5ad4",
 InitializationCell->False,
 CellID->329435916],
Cell[282731, 5704, 126, 1, 38, "ExampleText",ExpressionUUID->"a2b2eb47-91e7-48a3-8924-fe838460da4a",
 CellID->240332869],
Cell[282860, 5707, 337, 7, 28, "Input",ExpressionUUID->"369168c2-e0c4-4515-a0dc-c64d5cd3fb7b",
 InitializationCell->False,
 CellID->63762870],
Cell[283200, 5716, 338, 9, 40, "ExampleText",ExpressionUUID->"469edfc3-4816-418f-865a-41295273f886",
 CellID->82671892],
Cell[283541, 5727, 1211, 28, 164, "Input",ExpressionUUID->"1c85bb13-9e4a-4e73-a36d-bc155eca212b",
 InitializationCell->False,
 CellID->103396812]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSubsection", "0"}]]]],
Cell[CellGroupData[{
Cell[284881, 5761, 438, 11, 26, "ExampleSubsection",ExpressionUUID->"feceacc1-5c2a-4a0b-8b5f-652f8426a1e5",
 CellID->36802823],
Cell[285322, 5774, 111, 1, 38, "ExampleText",ExpressionUUID->"b3aec71e-ff5e-4dc5-899c-8e797aa2c5ac",
 CellID->788092525],
Cell[CellGroupData[{
Cell[285458, 5779, 373, 8, 44, "Input",ExpressionUUID->"4b9bfe95-1e75-4623-9e60-422a0b34af03",
 InitializationCell->False,
 CellID->66688289],
Cell[285834, 5789, 52586, 984, 231, "Output",ExpressionUUID->"bbf831fa-52b3-4b10-829b-86db6cad374a",
 CellID->221406167]
}, Open  ]],
Cell[338435, 6776, 209, 4, 57, "ExampleText",ExpressionUUID->"cfbfd396-40bd-479b-8b03-1b7597b8cc29",
 CellID->89729564],
Cell[CellGroupData[{
Cell[338669, 6784, 425, 10, 44, "Input",ExpressionUUID->"c718ae70-2165-45d2-89b3-e64ddd5aac59",
 InitializationCell->False,
 CellID->534731683],
Cell[339097, 6796, 56849, 1069, 255, "Output",ExpressionUUID->"e8422be3-3fac-4869-921e-b2d7df0a7dec",
 CellID->141529271]
}, Open  ]],
Cell[395961, 7868, 241, 4, 57, "ExampleText",ExpressionUUID->"45bfd5c3-3ff5-4fe4-8fa9-224379a963d0",
 CellID->30338671],
Cell[CellGroupData[{
Cell[396227, 7876, 376, 8, 42, "Input",ExpressionUUID->"accd7faa-5ead-48e4-90fa-37e2de5c38b2",
 InitializationCell->False,
 CellID->852382326],
Cell[396606, 7886, 56878, 1069, 255, "Output",ExpressionUUID->"8547df92-9d69-429e-9549-60100ca5aa6e",
 CellID->107631792]
}, Open  ]]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSubsection", "1"}]]]]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "ExampleSection", "1"}]]]],
Cell[453704, 8962, 106, 1, 0, "SectionFooterSpacer",ExpressionUUID->"8728e74c-9bed-4cd7-b83a-b8f27984ee44",
 CellID->207522610]
}, Dynamic[CurrentValue[EvaluationNotebook[], {TaggingRules, "Openers", "PrimaryExamplesSection", "0"}]]]],
Cell[CellGroupData[{
Cell[453947, 8970, 199, 4, 0, "SeeAlsoSection",ExpressionUUID->"df681c09-a2a5-405d-8c92-ec0dc694a6fc",
 CellID->261298214],
Cell[454149, 8976, 1429, 37, 113, "SeeAlsoSection",ExpressionUUID->"1af05827-4575-4462-866d-41000366f522",
 CellID->95190560]
}, Open  ]],
Cell[CellGroupData[{
Cell[455615, 9018, 204, 4, 0, "TutorialsSection",ExpressionUUID->"78b91f78-136e-411b-a9a8-6f89b638c60e",
 CellID->265959201],
Cell[455822, 9024, 104, 1, 0, "SectionHeaderSpacer",ExpressionUUID->"40e71dc0-3523-4ff0-a5d0-8c2938151533",
 CellID->7516922],
Cell[455929, 9027, 565, 14, 113, "TutorialsSection",ExpressionUUID->"b435c7f3-ad1d-48ef-a078-0c871baf3b1f",
 CellID->61818105],
Cell[456497, 9043, 105, 1, 0, "SectionFooterSpacer",ExpressionUUID->"a867ba68-fee9-4742-8752-03decff9eeef",
 CellID->54139818]
}, Open  ]],
Cell[CellGroupData[{
Cell[456639, 9049, 208, 4, 0, "MoreAboutSection",ExpressionUUID->"2ffe8a31-ff2c-45c5-ad4c-cbef387265ad",
 CellID->17211881],
Cell[456850, 9055, 106, 1, 0, "SectionHeaderSpacer",ExpressionUUID->"91bf5ba6-8bec-42fa-b4b9-52b768f29c22",
 CellID->111813277],
Cell[456959, 9058, 612, 14, 113, "MoreAboutSection",ExpressionUUID->"28980e25-248e-4cb6-af7b-1d1a16ab5122",
 CellID->233444222],
Cell[457574, 9074, 106, 1, 0, "SectionFooterSpacer",ExpressionUUID->"79c3b801-bbdb-4fce-a515-3f467e362e76",
 CellID->271595882]
}, Open  ]],
Cell[457695, 9078, 324, 8, 48, "History",ExpressionUUID->"0f4762b8-f17d-435a-bc07-3e9c11a3153d",
 CellID->9993063]
}
]
*)

